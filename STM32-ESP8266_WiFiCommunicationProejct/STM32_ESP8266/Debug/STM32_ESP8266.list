
STM32_ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c54  08004c54  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000005c  08004cb8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08004cb8  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f89  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a12  00000000  00000000  00028058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  00029a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c9  00000000  00000000  0002a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020980  00000000  00000000  0002a7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000094e0  00000000  00000000  0004b171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c683f  00000000  00000000  00054651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023e0  00000000  00000000  0011ae90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004aa4 	.word	0x08004aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004aa4 	.word	0x08004aa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fd65 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f91b 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 fa1f 	bl	80009cc <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 f9fd 	bl	800098c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000592:	f000 f9d1 	bl	8000938 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000596:	f000 f97d 	bl	8000894 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 800059a:	4b70      	ldr	r3, [pc, #448]	; (800075c <main+0x1e0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	4b6e      	ldr	r3, [pc, #440]	; (800075c <main+0x1e0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f042 0220 	orr.w	r2, r2, #32
 80005a8:	60da      	str	r2, [r3, #12]

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	496c      	ldr	r1, [pc, #432]	; (8000760 <main+0x1e4>)
 80005ae:	486d      	ldr	r0, [pc, #436]	; (8000764 <main+0x1e8>)
 80005b0:	f000 fe28 	bl	8001204 <HAL_ADC_Start_DMA>

start:
  if (ESP_INIT()) goto start;
 80005b4:	f000 fa6a 	bl	8000a8c <ESP_INIT>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d000      	beq.n	80005c0 <main+0x44>
 80005be:	e7f9      	b.n	80005b4 <main+0x38>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  button = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80005c0:	2101      	movs	r1, #1
 80005c2:	4869      	ldr	r0, [pc, #420]	; (8000768 <main+0x1ec>)
 80005c4:	f002 f80e 	bl	80025e4 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b67      	ldr	r3, [pc, #412]	; (800076c <main+0x1f0>)
 80005ce:	701a      	strb	r2, [r3, #0]
	  led1    = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_15);
 80005d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d4:	4866      	ldr	r0, [pc, #408]	; (8000770 <main+0x1f4>)
 80005d6:	f002 f805 	bl	80025e4 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b65      	ldr	r3, [pc, #404]	; (8000774 <main+0x1f8>)
 80005e0:	701a      	strb	r2, [r3, #0]
	  led2    = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	4862      	ldr	r0, [pc, #392]	; (8000770 <main+0x1f4>)
 80005e8:	f001 fffc 	bl	80025e4 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b61      	ldr	r3, [pc, #388]	; (8000778 <main+0x1fc>)
 80005f2:	701a      	strb	r2, [r3, #0]
	  adc = adc_buffer[0];
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <main+0x1e4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a60      	ldr	r2, [pc, #384]	; (800077c <main+0x200>)
 80005fa:	6013      	str	r3, [r2, #0]

	  if(counter>=2000)
 80005fc:	4b60      	ldr	r3, [pc, #384]	; (8000780 <main+0x204>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000604:	d359      	bcc.n	80006ba <main+0x13e>
	  {
		  counter = 0;
 8000606:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <main+0x204>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]

		  ret = ESP_Check_AT();
 800060c:	f000 fada 	bl	8000bc4 <ESP_Check_AT>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b5b      	ldr	r3, [pc, #364]	; (8000784 <main+0x208>)
 8000616:	701a      	strb	r2, [r3, #0]
		  if(ret==1) goto start;
 8000618:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <main+0x208>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d100      	bne.n	8000622 <main+0xa6>
 8000620:	e7c8      	b.n	80005b4 <main+0x38>

		  sprintf(Buffer,"MSG:%d ADC:%d BTN:%d LED1:%d LED2:%d\r\n\0",cnt++,adc,button,led1,led2);
 8000622:	4b59      	ldr	r3, [pc, #356]	; (8000788 <main+0x20c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	b2d1      	uxtb	r1, r2
 800062a:	4a57      	ldr	r2, [pc, #348]	; (8000788 <main+0x20c>)
 800062c:	7011      	strb	r1, [r2, #0]
 800062e:	461c      	mov	r4, r3
 8000630:	4b52      	ldr	r3, [pc, #328]	; (800077c <main+0x200>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a4d      	ldr	r2, [pc, #308]	; (800076c <main+0x1f0>)
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	4611      	mov	r1, r2
 800063a:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <main+0x1f8>)
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	4610      	mov	r0, r2
 8000640:	4a4d      	ldr	r2, [pc, #308]	; (8000778 <main+0x1fc>)
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	9202      	str	r2, [sp, #8]
 8000646:	9001      	str	r0, [sp, #4]
 8000648:	9100      	str	r1, [sp, #0]
 800064a:	4622      	mov	r2, r4
 800064c:	494f      	ldr	r1, [pc, #316]	; (800078c <main+0x210>)
 800064e:	4850      	ldr	r0, [pc, #320]	; (8000790 <main+0x214>)
 8000650:	f003 fd6e 	bl	8004130 <siprintf>

		  sprintf(Uart_TxData,"AT+CIPSEND=%d\r\n",strlen(Buffer));
 8000654:	484e      	ldr	r0, [pc, #312]	; (8000790 <main+0x214>)
 8000656:	f7ff fdbb 	bl	80001d0 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	494d      	ldr	r1, [pc, #308]	; (8000794 <main+0x218>)
 8000660:	484d      	ldr	r0, [pc, #308]	; (8000798 <main+0x21c>)
 8000662:	f003 fd65 	bl	8004130 <siprintf>
		  ret = ESP_AT_Send(Uart_TxData, strlen(Uart_TxData), ESP_SEND_RET, sizeof(ESP_SEND_RET), CMD_TRIAL);
 8000666:	484c      	ldr	r0, [pc, #304]	; (8000798 <main+0x21c>)
 8000668:	f7ff fdb2 	bl	80001d0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b2d9      	uxtb	r1, r3
 8000670:	2305      	movs	r3, #5
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2305      	movs	r3, #5
 8000676:	4a49      	ldr	r2, [pc, #292]	; (800079c <main+0x220>)
 8000678:	4847      	ldr	r0, [pc, #284]	; (8000798 <main+0x21c>)
 800067a:	f000 fabf 	bl	8000bfc <ESP_AT_Send>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b40      	ldr	r3, [pc, #256]	; (8000784 <main+0x208>)
 8000684:	701a      	strb	r2, [r3, #0]
		  if(ret==1) goto start;
 8000686:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <main+0x208>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d100      	bne.n	8000690 <main+0x114>
 800068e:	e791      	b.n	80005b4 <main+0x38>

		  ret = ESP_AT_Send(Buffer, strlen(Buffer), ESP_SEND_OK, sizeof(ESP_SEND_OK), CMD_TRIAL);
 8000690:	483f      	ldr	r0, [pc, #252]	; (8000790 <main+0x214>)
 8000692:	f7ff fd9d 	bl	80001d0 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b2d9      	uxtb	r1, r3
 800069a:	2305      	movs	r3, #5
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	230b      	movs	r3, #11
 80006a0:	4a3f      	ldr	r2, [pc, #252]	; (80007a0 <main+0x224>)
 80006a2:	483b      	ldr	r0, [pc, #236]	; (8000790 <main+0x214>)
 80006a4:	f000 faaa 	bl	8000bfc <ESP_AT_Send>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <main+0x208>)
 80006ae:	701a      	strb	r2, [r3, #0]

		  memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	2100      	movs	r1, #0
 80006b4:	483b      	ldr	r0, [pc, #236]	; (80007a4 <main+0x228>)
 80006b6:	f003 fd5b 	bl	8004170 <memset>
	  }

	  if(Rx_Message)
 80006ba:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <main+0x22c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d041      	beq.n	8000746 <main+0x1ca>
	  {
		  HAL_Delay(50);
 80006c2:	2032      	movs	r0, #50	; 0x32
 80006c4:	f000 fd36 	bl	8001134 <HAL_Delay>
		  Rx_Cnt = 0;
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <main+0x230>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		  Rx_Message = 0;
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <main+0x22c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

		  if(strstr(Uart_RxData,"LED1 ON") != 0)
 80006d4:	4936      	ldr	r1, [pc, #216]	; (80007b0 <main+0x234>)
 80006d6:	4833      	ldr	r0, [pc, #204]	; (80007a4 <main+0x228>)
 80006d8:	f003 fd52 	bl	8004180 <strstr>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d005      	beq.n	80006ee <main+0x172>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);		// Mavi LED ON
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4821      	ldr	r0, [pc, #132]	; (8000770 <main+0x1f4>)
 80006ea:	f001 ff93 	bl	8002614 <HAL_GPIO_WritePin>
		  }
		  if(strstr(Uart_RxData,"LED1 OFF") != 0)
 80006ee:	4931      	ldr	r1, [pc, #196]	; (80007b4 <main+0x238>)
 80006f0:	482c      	ldr	r0, [pc, #176]	; (80007a4 <main+0x228>)
 80006f2:	f003 fd45 	bl	8004180 <strstr>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d005      	beq.n	8000708 <main+0x18c>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);	// Mavi LED OFF
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000702:	481b      	ldr	r0, [pc, #108]	; (8000770 <main+0x1f4>)
 8000704:	f001 ff86 	bl	8002614 <HAL_GPIO_WritePin>
		  }
		  if(strstr(Uart_RxData,"LED2 ON") != 0)
 8000708:	492b      	ldr	r1, [pc, #172]	; (80007b8 <main+0x23c>)
 800070a:	4826      	ldr	r0, [pc, #152]	; (80007a4 <main+0x228>)
 800070c:	f003 fd38 	bl	8004180 <strstr>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d005      	beq.n	8000722 <main+0x1a6>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);		// Mavi LED ON
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	4814      	ldr	r0, [pc, #80]	; (8000770 <main+0x1f4>)
 800071e:	f001 ff79 	bl	8002614 <HAL_GPIO_WritePin>
		  }
		  if(strstr(Uart_RxData,"LED2 OFF") != 0)
 8000722:	4926      	ldr	r1, [pc, #152]	; (80007bc <main+0x240>)
 8000724:	481f      	ldr	r0, [pc, #124]	; (80007a4 <main+0x228>)
 8000726:	f003 fd2b 	bl	8004180 <strstr>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d005      	beq.n	800073c <main+0x1c0>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	// Mavi LED OFF
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <main+0x1f4>)
 8000738:	f001 ff6c 	bl	8002614 <HAL_GPIO_WritePin>
		  }

		  memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	2100      	movs	r1, #0
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <main+0x228>)
 8000742:	f003 fd15 	bl	8004170 <memset>

	  }


	  HAL_Delay(0);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fcf4 	bl	8001134 <HAL_Delay>
	  counter++;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <main+0x204>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <main+0x204>)
 8000756:	801a      	strh	r2, [r3, #0]
	  button = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8000758:	e732      	b.n	80005c0 <main+0x44>
 800075a:	bf00      	nop
 800075c:	20000120 	.word	0x20000120
 8000760:	20000484 	.word	0x20000484
 8000764:	20000078 	.word	0x20000078
 8000768:	40020000 	.word	0x40020000
 800076c:	20000480 	.word	0x20000480
 8000770:	40020c00 	.word	0x40020c00
 8000774:	2000048c 	.word	0x2000048c
 8000778:	2000048d 	.word	0x2000048d
 800077c:	20000488 	.word	0x20000488
 8000780:	2000048e 	.word	0x2000048e
 8000784:	2000047f 	.word	0x2000047f
 8000788:	2000047e 	.word	0x2000047e
 800078c:	08004abc 	.word	0x08004abc
 8000790:	2000037c 	.word	0x2000037c
 8000794:	08004ae4 	.word	0x08004ae4
 8000798:	20000260 	.word	0x20000260
 800079c:	08004be4 	.word	0x08004be4
 80007a0:	08004bec 	.word	0x08004bec
 80007a4:	20000160 	.word	0x20000160
 80007a8:	2000047d 	.word	0x2000047d
 80007ac:	2000047b 	.word	0x2000047b
 80007b0:	08004af4 	.word	0x08004af4
 80007b4:	08004afc 	.word	0x08004afc
 80007b8:	08004b08 	.word	0x08004b08
 80007bc:	08004b10 	.word	0x08004b10

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fcce 	bl	8004170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a27      	ldr	r2, [pc, #156]	; (800088c <SystemClock_Config+0xcc>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SystemClock_Config+0xd0>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <SystemClock_Config+0xd0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000834:	23a8      	movs	r3, #168	; 0xa8
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f001 feff 	bl	8002648 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000850:	f000 fa1e 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2105      	movs	r1, #5
 8000872:	4618      	mov	r0, r3
 8000874:	f002 f956 	bl	8002b24 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800087e:	f000 fa07 	bl	8000c90 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC1_Init+0x98>)
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ADC1_Init+0x98>)
 80008ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC1_Init+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC1_Init+0x98>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_ADC1_Init+0xa0>)
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_ADC1_Init+0x98>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ADC1_Init+0x98>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_ADC1_Init+0x98>)
 80008f6:	f000 fc41 	bl	800117c <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 f9c6 	bl	8000c90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000904:	2301      	movs	r3, #1
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800090c:	2303      	movs	r3, #3
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC1_Init+0x98>)
 8000916:	f000 fd85 	bl	8001424 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 f9b6 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000078 	.word	0x20000078
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART3_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000970:	f002 faf8 	bl	8002f64 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f989 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000120 	.word	0x20000120
 8000988:	40004800 	.word	0x40004800

0800098c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_DMA_Init+0x3c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <MX_DMA_Init+0x3c>)
 800099c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_DMA_Init+0x3c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	203c      	movs	r0, #60	; 0x3c
 80009b4:	f001 f8b1 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80009b8:	203c      	movs	r0, #60	; 0x3c
 80009ba:	f001 f8ca 	bl	8001b52 <HAL_NVIC_EnableIRQ>

}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_GPIO_Init+0xb4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a25      	ldr	r2, [pc, #148]	; (8000a80 <MX_GPIO_Init+0xb4>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_GPIO_Init+0xb4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_GPIO_Init+0xb4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <MX_GPIO_Init+0xb4>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_GPIO_Init+0xb4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_GPIO_Init+0xb4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <MX_GPIO_Init+0xb4>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_GPIO_Init+0xb4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_GPIO_Init+0xb8>)
 8000a3e:	f001 fde9 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_GPIO_Init+0xbc>)
 8000a56:	f001 fc29 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
 8000a5a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_GPIO_Init+0xb8>)
 8000a74:	f001 fc1a 	bl	80022ac <HAL_GPIO_Init>

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	40020000 	.word	0x40020000

08000a8c <ESP_INIT>:

/* USER CODE BEGIN 4 */
char ESP_INIT(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
	char ret;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a98:	4841      	ldr	r0, [pc, #260]	; (8000ba0 <ESP_INIT+0x114>)
 8000a9a:	f001 fdbb 	bl	8002614 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a9e:	20c8      	movs	r0, #200	; 0xc8
 8000aa0:	f000 fb48 	bl	8001134 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aaa:	483d      	ldr	r0, [pc, #244]	; (8000ba0 <ESP_INIT+0x114>)
 8000aac:	f001 fdb2 	bl	8002614 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab4:	f000 fb3e 	bl	8001134 <HAL_Delay>

	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000ab8:	2305      	movs	r3, #5
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2308      	movs	r3, #8
 8000abe:	4a39      	ldr	r2, [pc, #228]	; (8000ba4 <ESP_INIT+0x118>)
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	4839      	ldr	r0, [pc, #228]	; (8000ba8 <ESP_INIT+0x11c>)
 8000ac4:	f000 f89a 	bl	8000bfc <ESP_AT_Send>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d101      	bne.n	8000ad6 <ESP_INIT+0x4a>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e05f      	b.n	8000b96 <ESP_INIT+0x10a>
	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2308      	movs	r3, #8
 8000adc:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <ESP_INIT+0x118>)
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4831      	ldr	r0, [pc, #196]	; (8000ba8 <ESP_INIT+0x11c>)
 8000ae2:	f000 f88b 	bl	8000bfc <ESP_AT_Send>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d101      	bne.n	8000af4 <ESP_INIT+0x68>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e050      	b.n	8000b96 <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000af4:	20c8      	movs	r0, #200	; 0xc8
 8000af6:	f000 fb1d 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_MODE_CMD, sizeof(ESP_MODE_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000afa:	2305      	movs	r3, #5
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2308      	movs	r3, #8
 8000b00:	4a28      	ldr	r2, [pc, #160]	; (8000ba4 <ESP_INIT+0x118>)
 8000b02:	210f      	movs	r1, #15
 8000b04:	4829      	ldr	r0, [pc, #164]	; (8000bac <ESP_INIT+0x120>)
 8000b06:	f000 f879 	bl	8000bfc <ESP_AT_Send>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d101      	bne.n	8000b18 <ESP_INIT+0x8c>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e03e      	b.n	8000b96 <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b18:	20c8      	movs	r0, #200	; 0xc8
 8000b1a:	f000 fb0b 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_WIFI_SET_CMD, sizeof(ESP_WIFI_SET_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000b1e:	2305      	movs	r3, #5
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2308      	movs	r3, #8
 8000b24:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <ESP_INIT+0x118>)
 8000b26:	2123      	movs	r1, #35	; 0x23
 8000b28:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <ESP_INIT+0x124>)
 8000b2a:	f000 f867 	bl	8000bfc <ESP_AT_Send>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d101      	bne.n	8000b3c <ESP_INIT+0xb0>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e02c      	b.n	8000b96 <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b3c:	20c8      	movs	r0, #200	; 0xc8
 8000b3e:	f000 faf9 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_WIFI_IP_CMD, sizeof(ESP_WIFI_IP_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000b42:	2305      	movs	r3, #5
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2308      	movs	r3, #8
 8000b48:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <ESP_INIT+0x118>)
 8000b4a:	213a      	movs	r1, #58	; 0x3a
 8000b4c:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <ESP_INIT+0x128>)
 8000b4e:	f000 f855 	bl	8000bfc <ESP_AT_Send>
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d101      	bne.n	8000b60 <ESP_INIT+0xd4>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e01a      	b.n	8000b96 <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b60:	20c8      	movs	r0, #200	; 0xc8
 8000b62:	f000 fae7 	bl	8001134 <HAL_Delay>
	ret = ESP_AT_Send(ESP_UDP_CMD, sizeof(ESP_UDP_CMD), ESP_UDP_RET, sizeof(ESP_UDP_RET), CMD_TRIAL);
 8000b66:	2305      	movs	r3, #5
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	230d      	movs	r3, #13
 8000b6c:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <ESP_INIT+0x12c>)
 8000b6e:	212f      	movs	r1, #47	; 0x2f
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <ESP_INIT+0x130>)
 8000b72:	f000 f843 	bl	8000bfc <ESP_AT_Send>
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <ESP_INIT+0xf8>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e008      	b.n	8000b96 <ESP_INIT+0x10a>
	HAL_Delay(200);
 8000b84:	20c8      	movs	r0, #200	; 0xc8
 8000b86:	f000 fad5 	bl	8001134 <HAL_Delay>



	memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <ESP_INIT+0x134>)
 8000b90:	f003 faee 	bl	8004170 <memset>

	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	08004b2c 	.word	0x08004b2c
 8000ba8:	08004b24 	.word	0x08004b24
 8000bac:	08004b34 	.word	0x08004b34
 8000bb0:	08004b44 	.word	0x08004b44
 8000bb4:	08004b68 	.word	0x08004b68
 8000bb8:	08004bd4 	.word	0x08004bd4
 8000bbc:	08004ba4 	.word	0x08004ba4
 8000bc0:	20000160 	.word	0x20000160

08000bc4 <ESP_Check_AT>:

char ESP_Check_AT(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af02      	add	r7, sp, #8
	char ret;

	ret = ESP_AT_Send(ESP_AT_CMD, sizeof(ESP_AT_CMD), ESP_AT_RET, sizeof(ESP_AT_RET), CMD_TRIAL);
 8000bca:	2305      	movs	r3, #5
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2308      	movs	r3, #8
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <ESP_Check_AT+0x30>)
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <ESP_Check_AT+0x34>)
 8000bd6:	f000 f811 	bl	8000bfc <ESP_AT_Send>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	if(ret==1) return 1;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <ESP_Check_AT+0x24>
 8000be4:	2301      	movs	r3, #1
 8000be6:	e000      	b.n	8000bea <ESP_Check_AT+0x26>

	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08004b2c 	.word	0x08004b2c
 8000bf8:	08004b24 	.word	0x08004b24

08000bfc <ESP_AT_Send>:

char ESP_AT_Send(char *Cmd, char CmdSize, char *rData, char RetSize, char trial)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	461a      	mov	r2, r3
 8000c08:	460b      	mov	r3, r1
 8000c0a:	72fb      	strb	r3, [r7, #11]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	72bb      	strb	r3, [r7, #10]
    char cnt=0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	75fb      	strb	r3, [r7, #23]

	memset(returnData,0x00,sizeof(returnData));
 8000c14:	2219      	movs	r2, #25
 8000c16:	2100      	movs	r1, #0
 8000c18:	4818      	ldr	r0, [pc, #96]	; (8000c7c <ESP_AT_Send+0x80>)
 8000c1a:	f003 faa9 	bl	8004170 <memset>
	memcpy(returnData,rData,RetSize);
 8000c1e:	7abb      	ldrb	r3, [r7, #10]
 8000c20:	461a      	mov	r2, r3
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <ESP_AT_Send+0x80>)
 8000c26:	f003 faed 	bl	8004204 <memcpy>

    while(cnt<trial)
 8000c2a:	e01d      	b.n	8000c68 <ESP_AT_Send+0x6c>
    {

    	Rx_Cnt = 0;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <ESP_AT_Send+0x84>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
        memset(Uart_RxData,0x00,sizeof(Uart_RxData));
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	2100      	movs	r1, #0
 8000c36:	4813      	ldr	r0, [pc, #76]	; (8000c84 <ESP_AT_Send+0x88>)
 8000c38:	f003 fa9a 	bl	8004170 <memset>
        HAL_UART_Transmit(&huart3, (uint8_t*)Cmd, CmdSize, 50);
 8000c3c:	7afb      	ldrb	r3, [r7, #11]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	2332      	movs	r3, #50	; 0x32
 8000c42:	68f9      	ldr	r1, [r7, #12]
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <ESP_AT_Send+0x8c>)
 8000c46:	f002 f9da 	bl	8002ffe <HAL_UART_Transmit>
        HAL_Delay(50);
 8000c4a:	2032      	movs	r0, #50	; 0x32
 8000c4c:	f000 fa72 	bl	8001134 <HAL_Delay>
        if(Rx_Flag)
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <ESP_AT_Send+0x90>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <ESP_AT_Send+0x66>
        {
        	Rx_Flag = 0;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <ESP_AT_Send+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
        	return 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e008      	b.n	8000c74 <ESP_AT_Send+0x78>
        }
    	cnt++;
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	3301      	adds	r3, #1
 8000c66:	75fb      	strb	r3, [r7, #23]
    while(cnt<trial)
 8000c68:	7dfa      	ldrb	r2, [r7, #23]
 8000c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3dc      	bcc.n	8000c2c <ESP_AT_Send+0x30>
    }

    return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000360 	.word	0x20000360
 8000c80:	2000047b 	.word	0x2000047b
 8000c84:	20000160 	.word	0x20000160
 8000c88:	20000120 	.word	0x20000120
 8000c8c:	2000047c 	.word	0x2000047c

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d158      	bne.n	8000dc0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <HAL_ADC_MspInit+0xe4>)
 8000d5a:	f001 faa7 	bl	80022ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_ADC_MspInit+0xec>)
 8000d62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000da6:	f000 feef 	bl	8001b88 <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000db0:	f7ff ff6e 	bl	8000c90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_ADC_MspInit+0xe8>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40012000 	.word	0x40012000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	200000c0 	.word	0x200000c0
 8000dd8:	40026470 	.word	0x40026470

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d134      	bne.n	8000e68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_UART_MspInit+0x98>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_UART_MspInit+0x9c>)
 8000e54:	f001 fa2a 	bl	80022ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2027      	movs	r0, #39	; 0x27
 8000e5e:	f000 fe5c 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e62:	2027      	movs	r0, #39	; 0x27
 8000e64:	f000 fe75 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004800 	.word	0x40004800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020c00 	.word	0x40020c00

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f914 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  HAL_UART_Receive(&huart3, &Rx_Byte[0], 1, 10);
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4915      	ldr	r1, [pc, #84]	; (8000f30 <USART3_IRQHandler+0x60>)
 8000eda:	4816      	ldr	r0, [pc, #88]	; (8000f34 <USART3_IRQHandler+0x64>)
 8000edc:	f002 f928 	bl	8003130 <HAL_UART_Receive>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <USART3_IRQHandler+0x64>)
 8000ee2:	f002 f9cb 	bl	800327c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  Uart_RxData[Rx_Cnt++] = Rx_Byte[0];
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <USART3_IRQHandler+0x68>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	b2d1      	uxtb	r1, r2
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <USART3_IRQHandler+0x68>)
 8000ef0:	7011      	strb	r1, [r2, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <USART3_IRQHandler+0x60>)
 8000ef6:	7819      	ldrb	r1, [r3, #0]
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <USART3_IRQHandler+0x6c>)
 8000efa:	5499      	strb	r1, [r3, r2]

  if(strstr(Uart_RxData,"+IPD") != 0)
 8000efc:	4910      	ldr	r1, [pc, #64]	; (8000f40 <USART3_IRQHandler+0x70>)
 8000efe:	480f      	ldr	r0, [pc, #60]	; (8000f3c <USART3_IRQHandler+0x6c>)
 8000f00:	f003 f93e 	bl	8004180 <strstr>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <USART3_IRQHandler+0x40>
  {
	Rx_Message = 1;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <USART3_IRQHandler+0x74>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
  }

  if(strstr(Uart_RxData,returnData) != 0)
 8000f10:	490d      	ldr	r1, [pc, #52]	; (8000f48 <USART3_IRQHandler+0x78>)
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <USART3_IRQHandler+0x6c>)
 8000f14:	f003 f934 	bl	8004180 <strstr>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <USART3_IRQHandler+0x5a>
  {
	Rx_Cnt = 0;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <USART3_IRQHandler+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	Rx_Flag = 1;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <USART3_IRQHandler+0x7c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART3_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000490 	.word	0x20000490
 8000f34:	20000120 	.word	0x20000120
 8000f38:	2000047b 	.word	0x2000047b
 8000f3c:	20000160 	.word	0x20000160
 8000f40:	08004b1c 	.word	0x08004b1c
 8000f44:	2000047d 	.word	0x2000047d
 8000f48:	20000360 	.word	0x20000360
 8000f4c:	2000047c 	.word	0x2000047c

08000f50 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DMA2_Stream4_IRQHandler+0x10>)
 8000f56:	f000 ff3f 	bl	8001dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000c0 	.word	0x200000c0

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f003 f90a 	bl	80041ac <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20020000 	.word	0x20020000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000494 	.word	0x20000494
 8000fcc:	200005e8 	.word	0x200005e8

08000fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SystemInit+0x28>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <SystemInit+0x28>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0x28>)
 8000fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fea:	609a      	str	r2, [r3, #8]
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001000:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001002:	e003      	b.n	800100c <LoopCopyDataInit>

08001004 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001006:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001008:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800100a:	3104      	adds	r1, #4

0800100c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001010:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001012:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001014:	d3f6      	bcc.n	8001004 <CopyDataInit>
  ldr  r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001018:	e002      	b.n	8001020 <LoopFillZerobss>

0800101a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800101a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800101c:	f842 3b04 	str.w	r3, [r2], #4

08001020 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001024:	d3f9      	bcc.n	800101a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd3 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f003 f8c5 	bl	80041b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff faa5 	bl	800057c <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001038:	08004c5c 	.word	0x08004c5c
  ldr  r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001040:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 8001044:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 8001048:	200005e4 	.word	0x200005e4

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 fd43 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe0a 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fd5b 	bl	8001b6e <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 fd23 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000498 	.word	0x20000498

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000498 	.word	0x20000498

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e033      	b.n	80011fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fda6 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d118      	bne.n	80011ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c2:	f023 0302 	bic.w	r3, r3, #2
 80011c6:	f043 0202 	orr.w	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fa4a 	bl	8001668 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f023 0303 	bic.w	r3, r3, #3
 80011e2:	f043 0201 	orr.w	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
 80011ea:	e001      	b.n	80011f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Start_DMA+0x1e>
 800121e:	2302      	movs	r3, #2
 8001220:	e0cc      	b.n	80013bc <HAL_ADC_Start_DMA+0x1b8>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d018      	beq.n	800126a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001248:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <HAL_ADC_Start_DMA+0x1c0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a5e      	ldr	r2, [pc, #376]	; (80013c8 <HAL_ADC_Start_DMA+0x1c4>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9a      	lsrs	r2, r3, #18
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800125c:	e002      	b.n	8001264 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	3b01      	subs	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	f040 80a0 	bne.w	80013ba <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b8:	d106      	bne.n	80012c8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f023 0206 	bic.w	r2, r3, #6
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
 80012c6:	e002      	b.n	80012ce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_ADC_Start_DMA+0x1c8>)
 80012d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	4a3c      	ldr	r2, [pc, #240]	; (80013d0 <HAL_ADC_Start_DMA+0x1cc>)
 80012e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	4a3b      	ldr	r2, [pc, #236]	; (80013d4 <HAL_ADC_Start_DMA+0x1d0>)
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	4a3a      	ldr	r2, [pc, #232]	; (80013d8 <HAL_ADC_Start_DMA+0x1d4>)
 80012f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800130a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800131a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	334c      	adds	r3, #76	; 0x4c
 8001326:	4619      	mov	r1, r3
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f000 fcda 	bl	8001ce4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	2b00      	cmp	r3, #0
 800133a:	d12a      	bne.n	8001392 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a26      	ldr	r2, [pc, #152]	; (80013dc <HAL_ADC_Start_DMA+0x1d8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d015      	beq.n	8001372 <HAL_ADC_Start_DMA+0x16e>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_ADC_Start_DMA+0x1dc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d105      	bne.n	800135c <HAL_ADC_Start_DMA+0x158>
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_ADC_Start_DMA+0x1c8>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_ADC_Start_DMA+0x1e0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d129      	bne.n	80013ba <HAL_ADC_Start_DMA+0x1b6>
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_ADC_Start_DMA+0x1c8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d123      	bne.n	80013ba <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d11c      	bne.n	80013ba <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e013      	b.n	80013ba <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_ADC_Start_DMA+0x1d8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d10e      	bne.n	80013ba <HAL_ADC_Start_DMA+0x1b6>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d107      	bne.n	80013ba <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	40012300 	.word	0x40012300
 80013d0:	08001861 	.word	0x08001861
 80013d4:	0800191b 	.word	0x0800191b
 80013d8:	08001937 	.word	0x08001937
 80013dc:	40012000 	.word	0x40012000
 80013e0:	40012100 	.word	0x40012100
 80013e4:	40012200 	.word	0x40012200

080013e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1c>
 800143c:	2302      	movs	r3, #2
 800143e:	e105      	b.n	800164c <HAL_ADC_ConfigChannel+0x228>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d925      	bls.n	800149c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	3b1e      	subs	r3, #30
 8001466:	2207      	movs	r2, #7
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43da      	mvns	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	400a      	ands	r2, r1
 8001474:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	4603      	mov	r3, r0
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4403      	add	r3, r0
 800148e:	3b1e      	subs	r3, #30
 8001490:	409a      	lsls	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	e022      	b.n	80014e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6919      	ldr	r1, [r3, #16]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	2207      	movs	r2, #7
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	400a      	ands	r2, r1
 80014be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6919      	ldr	r1, [r3, #16]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4403      	add	r3, r0
 80014d8:	409a      	lsls	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d824      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b05      	subs	r3, #5
 80014fc:	221f      	movs	r2, #31
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b05      	subs	r3, #5
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
 8001532:	e04c      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d824      	bhi.n	8001586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b23      	subs	r3, #35	; 0x23
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43da      	mvns	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	400a      	ands	r2, r1
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b23      	subs	r3, #35	; 0x23
 8001578:	fa00 f203 	lsl.w	r2, r0, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
 8001584:	e023      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b41      	subs	r3, #65	; 0x41
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b41      	subs	r3, #65	; 0x41
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_ADC_ConfigChannel+0x234>)
 80015d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_ADC_ConfigChannel+0x238>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d109      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1cc>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_ADC_ConfigChannel+0x238>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d123      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x21e>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d003      	beq.n	800160a <HAL_ADC_ConfigChannel+0x1e6>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b11      	cmp	r3, #17
 8001608:	d11b      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b10      	cmp	r3, #16
 800161c:	d111      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_ADC_ConfigChannel+0x23c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a10      	ldr	r2, [pc, #64]	; (8001664 <HAL_ADC_ConfigChannel+0x240>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9a      	lsrs	r2, r3, #18
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001634:	e002      	b.n	800163c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40012300 	.word	0x40012300
 800165c:	40012000 	.word	0x40012000
 8001660:	20000000 	.word	0x20000000
 8001664:	431bde83 	.word	0x431bde83

08001668 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001670:	4b79      	ldr	r3, [pc, #484]	; (8001858 <ADC_Init+0x1f0>)
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	431a      	orrs	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800169c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	021a      	lsls	r2, r3, #8
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6899      	ldr	r1, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	4a58      	ldr	r2, [pc, #352]	; (800185c <ADC_Init+0x1f4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6899      	ldr	r1, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	e00f      	b.n	8001766 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001764:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0202 	bic.w	r2, r2, #2
 8001774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6899      	ldr	r1, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e1b      	ldrb	r3, [r3, #24]
 8001780:	005a      	lsls	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01b      	beq.n	80017cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	3b01      	subs	r3, #1
 80017c0:	035a      	lsls	r2, r3, #13
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	e007      	b.n	80017dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	051a      	lsls	r2, r3, #20
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181e:	025a      	lsls	r2, r3, #9
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6899      	ldr	r1, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	029a      	lsls	r2, r3, #10
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40012300 	.word	0x40012300
 800185c:	0f000001 	.word	0x0f000001

08001860 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001876:	2b00      	cmp	r3, #0
 8001878:	d13c      	bne.n	80018f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d12b      	bne.n	80018ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001898:	2b00      	cmp	r3, #0
 800189a:	d127      	bne.n	80018ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d119      	bne.n	80018ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0220 	bic.w	r2, r2, #32
 80018c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fd7b 	bl	80013e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018f2:	e00e      	b.n	8001912 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fd85 	bl	8001410 <HAL_ADC_ErrorCallback>
}
 8001906:	e004      	b.n	8001912 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fd67 	bl	80013fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f043 0204 	orr.w	r2, r3, #4
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff fd5a 	bl	8001410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff3e 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff31 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff fac2 	bl	800111c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e099      	b.n	8001cd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc4:	e00f      	b.n	8001be6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc6:	f7ff faa9 	bl	800111c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d908      	bls.n	8001be6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e078      	b.n	8001cd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e8      	bne.n	8001bc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_DMA_Init+0x158>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d107      	bne.n	8001c50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f023 0307 	bic.w	r3, r3, #7
 8001c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d117      	bne.n	8001caa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fa91 	bl	80021b4 <DMA_CheckFifoParam>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e016      	b.n	8001cd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fa48 	bl	8002148 <DMA_CalcBaseAndBitshift>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	223f      	movs	r2, #63	; 0x3f
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	f010803f 	.word	0xf010803f

08001ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_DMA_Start_IT+0x26>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e040      	b.n	8001d8c <HAL_DMA_Start_IT+0xa8>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d12f      	bne.n	8001d7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f9da 	bl	80020ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0216 	orr.w	r2, r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0208 	orr.w	r2, r2, #8
 8001d6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	e005      	b.n	8001d8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
 8001d88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00c      	b.n	8001dcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2205      	movs	r2, #5
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de4:	4b8e      	ldr	r3, [pc, #568]	; (8002020 <HAL_DMA_IRQHandler+0x248>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a8e      	ldr	r2, [pc, #568]	; (8002024 <HAL_DMA_IRQHandler+0x24c>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a9b      	lsrs	r3, r3, #10
 8001df0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2208      	movs	r2, #8
 8001e04:	409a      	lsls	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01a      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0204 	bic.w	r2, r2, #4
 8001e2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2208      	movs	r2, #8
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2201      	movs	r2, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d012      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	2201      	movs	r2, #1
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	f043 0202 	orr.w	r2, r3, #2
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2204      	movs	r2, #4
 8001e80:	409a      	lsls	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d012      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	f043 0204 	orr.w	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d043      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03c      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d018      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d108      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d024      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
 8001f06:	e01f      	b.n	8001f48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e016      	b.n	8001f48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d107      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0208 	bic.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 808f 	beq.w	8002078 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8087 	beq.w	8002078 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2220      	movs	r2, #32
 8001f70:	409a      	lsls	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d136      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0216 	bic.w	r2, r2, #22
 8001f90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_DMA_IRQHandler+0x1da>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	223f      	movs	r2, #63	; 0x3f
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d07e      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
        }
        return;
 8001fee:	e079      	b.n	80020e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	2b00      	cmp	r3, #0
 8002012:	d031      	beq.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
 800201c:	e02c      	b.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
 800201e:	bf00      	nop
 8002020:	20000000 	.word	0x20000000
 8002024:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d023      	beq.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e01e      	b.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10f      	bne.n	8002068 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0210 	bic.w	r2, r2, #16
 8002056:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	2b00      	cmp	r3, #0
 800207e:	d032      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d022      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2205      	movs	r2, #5
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d307      	bcc.n	80020c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f2      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x2cc>
 80020be:	e000      	b.n	80020c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020c0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
 80020e2:	e000      	b.n	80020e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020e4:	bf00      	nop
    }
  }
}
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002108:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d108      	bne.n	800212c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800212a:	e007      	b.n	800213c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3b10      	subs	r3, #16
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <DMA_CalcBaseAndBitshift+0x64>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d909      	bls.n	800218a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	1d1a      	adds	r2, r3, #4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	659a      	str	r2, [r3, #88]	; 0x58
 8002188:	e007      	b.n	800219a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	aaaaaaab 	.word	0xaaaaaaab
 80021b0:	08004c10 	.word	0x08004c10

080021b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d11f      	bne.n	800220e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d856      	bhi.n	8002282 <DMA_CheckFifoParam+0xce>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <DMA_CheckFifoParam+0x28>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	080021ed 	.word	0x080021ed
 80021e0:	080021ff 	.word	0x080021ff
 80021e4:	080021ed 	.word	0x080021ed
 80021e8:	08002283 	.word	0x08002283
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d046      	beq.n	8002286 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fc:	e043      	b.n	8002286 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002206:	d140      	bne.n	800228a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220c:	e03d      	b.n	800228a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002216:	d121      	bne.n	800225c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d837      	bhi.n	800228e <DMA_CheckFifoParam+0xda>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <DMA_CheckFifoParam+0x70>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	08002235 	.word	0x08002235
 8002228:	0800223b 	.word	0x0800223b
 800222c:	08002235 	.word	0x08002235
 8002230:	0800224d 	.word	0x0800224d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      break;
 8002238:	e030      	b.n	800229c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d025      	beq.n	8002292 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224a:	e022      	b.n	8002292 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002254:	d11f      	bne.n	8002296 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800225a:	e01c      	b.n	8002296 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d903      	bls.n	800226a <DMA_CheckFifoParam+0xb6>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d003      	beq.n	8002270 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002268:	e018      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      break;
 800226e:	e015      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00e      	beq.n	800229a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e00b      	b.n	800229a <DMA_CheckFifoParam+0xe6>
      break;
 8002282:	bf00      	nop
 8002284:	e00a      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
 8002288:	e008      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
 800228c:	e006      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
 8002290:	e004      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 8002292:	bf00      	nop
 8002294:	e002      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;   
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
    }
  } 
  
  return status; 
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e16b      	b.n	80025a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f040 815a 	bne.w	800259a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d00b      	beq.n	8002306 <HAL_GPIO_Init+0x5a>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d007      	beq.n	8002306 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022fa:	2b11      	cmp	r3, #17
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b12      	cmp	r3, #18
 8002304:	d130      	bne.n	8002368 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0201 	and.w	r2, r3, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0xfc>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b12      	cmp	r3, #18
 80023a6:	d123      	bne.n	80023f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80b4 	beq.w	800259a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800244e:	4a5b      	ldr	r2, [pc, #364]	; (80025bc <HAL_GPIO_Init+0x310>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_GPIO_Init+0x314>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02b      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_GPIO_Init+0x318>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x222>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x21e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <HAL_GPIO_Init+0x320>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x21a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <HAL_GPIO_Init+0x324>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x216>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4d      	ldr	r2, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x328>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x212>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_GPIO_Init+0x32c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_GPIO_Init+0x330>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x20a>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00e      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024b6:	2308      	movs	r3, #8
 80024b8:	e00c      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e00a      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024be:	2305      	movs	r3, #5
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x310>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_GPIO_Init+0x334>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002516:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_GPIO_Init+0x334>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002540:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_GPIO_Init+0x334>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f ae90 	bls.w	80022c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40021400 	.word	0x40021400
 80025d8:	40021800 	.word	0x40021800
 80025dc:	40021c00 	.word	0x40021c00
 80025e0:	40013c00 	.word	0x40013c00

080025e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e001      	b.n	8002606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e25e      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d075      	beq.n	8002752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d00c      	beq.n	800268c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	2b08      	cmp	r3, #8
 800267c:	d112      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268a:	d10b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05b      	beq.n	8002750 <HAL_RCC_OscConfig+0x108>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d157      	bne.n	8002750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e239      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x74>
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6f      	ldr	r2, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6c      	ldr	r2, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a68      	ldr	r2, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe fd0c 	bl	800111c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe fd08 	bl	800111c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1fe      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xc0>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fcf8 	bl	800111c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fcf4 	bl	800111c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1ea      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0xe8>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b44      	ldr	r3, [pc, #272]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1be      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fcad 	bl	800111c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe fca9 	bl	800111c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e19f      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4925      	ldr	r1, [pc, #148]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fc8c 	bl	800111c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002808:	f7fe fc88 	bl	800111c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e17e      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d036      	beq.n	80028a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fc6c 	bl	800111c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fc68 	bl	800111c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e15e      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x200>
 8002866:	e01b      	b.n	80028a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe fc55 	bl	800111c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00e      	b.n	8002894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fc51 	bl	800111c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d907      	bls.n	8002894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e147      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ea      	bne.n	8002876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8097 	beq.w	80029dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b7a      	ldr	r3, [pc, #488]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b77      	ldr	r3, [pc, #476]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b74      	ldr	r3, [pc, #464]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a73      	ldr	r2, [pc, #460]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7fe fc11 	bl	800111c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe fc0d 	bl	800111c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e103      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x2ea>
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x30c>
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a5e      	ldr	r2, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a5b      	ldr	r2, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002954:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fbd2 	bl	800111c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fbce 	bl	800111c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0c2      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ee      	beq.n	800297c <HAL_RCC_OscConfig+0x334>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fbbc 	bl	800111c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe fbb8 	bl	800111c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0ac      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8098 	beq.w	8002b16 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d05c      	beq.n	8002aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d141      	bne.n	8002a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe fb8c 	bl	800111c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe fb88 	bl	800111c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e07e      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fb61 	bl	800111c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fb5d 	bl	800111c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e053      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x416>
 8002a7c:	e04b      	b.n	8002b16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fb4a 	bl	800111c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fb46 	bl	800111c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e03c      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x444>
 8002aaa:	e034      	b.n	8002b16 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e02f      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_RCC_OscConfig+0x4d8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d11c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d115      	bne.n	8002b12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aec:	4013      	ands	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10d      	bne.n	8002b12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0cc      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d90c      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d044      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d119      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e067      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4934      	ldr	r1, [pc, #208]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7fe fa82 	bl	800111c <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7fe fa7e 	bl	800111c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e04f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d20c      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f9e2 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08004bf8 	.word	0x08004bf8
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b094      	sub	sp, #80	; 0x50
 8002cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d00:	2300      	movs	r3, #0
 8002d02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d08:	4b79      	ldr	r3, [pc, #484]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d00d      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	f200 80e1 	bhi.w	8002edc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d22:	e0db      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d28:	e0db      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d2e:	e0d8      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d063      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d58:	633b      	str	r3, [r7, #48]	; 0x30
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	f04f 0000 	mov.w	r0, #0
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	0159      	lsls	r1, r3, #5
 8002d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d74:	0150      	lsls	r0, r2, #5
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	1a51      	subs	r1, r2, r1
 8002d7e:	6139      	str	r1, [r7, #16]
 8002d80:	4629      	mov	r1, r5
 8002d82:	eb63 0301 	sbc.w	r3, r3, r1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d94:	4659      	mov	r1, fp
 8002d96:	018b      	lsls	r3, r1, #6
 8002d98:	4651      	mov	r1, sl
 8002d9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d9e:	4651      	mov	r1, sl
 8002da0:	018a      	lsls	r2, r1, #6
 8002da2:	4651      	mov	r1, sl
 8002da4:	ebb2 0801 	subs.w	r8, r2, r1
 8002da8:	4659      	mov	r1, fp
 8002daa:	eb63 0901 	sbc.w	r9, r3, r1
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dc2:	4690      	mov	r8, r2
 8002dc4:	4699      	mov	r9, r3
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	eb18 0303 	adds.w	r3, r8, r3
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	462b      	mov	r3, r5
 8002dd0:	eb49 0303 	adc.w	r3, r9, r3
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002de2:	4629      	mov	r1, r5
 8002de4:	024b      	lsls	r3, r1, #9
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dec:	4621      	mov	r1, r4
 8002dee:	024a      	lsls	r2, r1, #9
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df6:	2200      	movs	r2, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e00:	f7fd fa3e 	bl	8000280 <__aeabi_uldivmod>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4613      	mov	r3, r2
 8002e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e0c:	e058      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	2200      	movs	r2, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	4611      	mov	r1, r2
 8002e1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
 8002e24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e28:	4642      	mov	r2, r8
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	f04f 0000 	mov.w	r0, #0
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	0159      	lsls	r1, r3, #5
 8002e36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e3a:	0150      	lsls	r0, r2, #5
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4641      	mov	r1, r8
 8002e42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e46:	4649      	mov	r1, r9
 8002e48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e60:	ebb2 040a 	subs.w	r4, r2, sl
 8002e64:	eb63 050b 	sbc.w	r5, r3, fp
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	00eb      	lsls	r3, r5, #3
 8002e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e76:	00e2      	lsls	r2, r4, #3
 8002e78:	4614      	mov	r4, r2
 8002e7a:	461d      	mov	r5, r3
 8002e7c:	4643      	mov	r3, r8
 8002e7e:	18e3      	adds	r3, r4, r3
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	464b      	mov	r3, r9
 8002e84:	eb45 0303 	adc.w	r3, r5, r3
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e96:	4629      	mov	r1, r5
 8002e98:	028b      	lsls	r3, r1, #10
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	028a      	lsls	r2, r1, #10
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	61fa      	str	r2, [r7, #28]
 8002eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb4:	f7fd f9e4 	bl	8000280 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eda:	e002      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3750      	adds	r7, #80	; 0x50
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	007a1200 	.word	0x007a1200

08002efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000000 	.word	0x20000000

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f18:	f7ff fff0 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	08004c08 	.word	0x08004c08

08002f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f40:	f7ff ffdc 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0b5b      	lsrs	r3, r3, #13
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08004c08 	.word	0x08004c08

08002f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e03f      	b.n	8002ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd ff26 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fbf1 	bl	8003790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b088      	sub	sp, #32
 8003002:	af02      	add	r7, sp, #8
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	f040 8083 	bne.w	8003126 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_Transmit+0x2e>
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e07b      	b.n	8003128 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_UART_Transmit+0x40>
 800303a:	2302      	movs	r3, #2
 800303c:	e074      	b.n	8003128 <HAL_UART_Transmit+0x12a>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2221      	movs	r2, #33	; 0x21
 8003050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003054:	f7fe f862 	bl	800111c <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800306e:	e042      	b.n	80030f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	d122      	bne.n	80030ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2200      	movs	r2, #0
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa10 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e042      	b.n	8003128 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d103      	bne.n	80030c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3302      	adds	r3, #2
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	e017      	b.n	80030f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3301      	adds	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	e013      	b.n	80030f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f9ed 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e01f      	b.n	8003128 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	60ba      	str	r2, [r7, #8]
 80030ee:	781a      	ldrb	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1b7      	bne.n	8003070 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f9d4 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e006      	b.n	8003128 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003126:	2302      	movs	r3, #2
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	f040 8090 	bne.w	8003272 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_UART_Receive+0x2e>
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e088      	b.n	8003274 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_UART_Receive+0x40>
 800316c:	2302      	movs	r3, #2
 800316e:	e081      	b.n	8003274 <HAL_UART_Receive+0x144>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2222      	movs	r2, #34	; 0x22
 8003182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003186:	f7fd ffc9 	bl	800111c <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031a0:	e05c      	b.n	800325c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d12b      	bne.n	8003212 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2120      	movs	r1, #32
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f977 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e04f      	b.n	8003274 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10c      	bne.n	80031fa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3302      	adds	r3, #2
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	e030      	b.n	800325c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	b29b      	uxth	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	b29a      	uxth	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3301      	adds	r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e024      	b.n	800325c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	2120      	movs	r1, #32
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f94b 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e023      	b.n	8003274 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d108      	bne.n	8003246 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	60ba      	str	r2, [r7, #8]
 8003240:	b2ca      	uxtb	r2, r1
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e00a      	b.n	800325c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	1c59      	adds	r1, r3, #1
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d19d      	bne.n	80031a2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e000      	b.n	8003274 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003272:	2302      	movs	r3, #2
  }
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_UART_IRQHandler+0x52>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f9e0 	bl	800368c <UART_Receive_IT>
      return;
 80032cc:	e0d0      	b.n	8003470 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80b0 	beq.w	8003436 <HAL_UART_IRQHandler+0x1ba>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_UART_IRQHandler+0x70>
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a5 	beq.w	8003436 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_UART_IRQHandler+0x90>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_UART_IRQHandler+0xb0>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	f043 0202 	orr.w	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_UART_IRQHandler+0xd0>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00f      	beq.n	8003376 <HAL_UART_IRQHandler+0xfa>
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_UART_IRQHandler+0xee>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d077      	beq.n	800346e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_UART_IRQHandler+0x11c>
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f97a 	bl	800368c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <HAL_UART_IRQHandler+0x144>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d031      	beq.n	8003424 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f8c3 	bl	800354c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d123      	bne.n	800341c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	4a21      	ldr	r2, [pc, #132]	; (8003478 <HAL_UART_IRQHandler+0x1fc>)
 80033f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fccb 	bl	8001d94 <HAL_DMA_Abort_IT>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d016      	beq.n	8003432 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800340e:	4610      	mov	r0, r2
 8003410:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003412:	e00e      	b.n	8003432 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f845 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341a:	e00a      	b.n	8003432 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f841 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003422:	e006      	b.n	8003432 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f83d 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003430:	e01d      	b.n	800346e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003432:	bf00      	nop
    return;
 8003434:	e01b      	b.n	800346e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_UART_IRQHandler+0x1d6>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8b0 	bl	80035b0 <UART_Transmit_IT>
    return;
 8003450:	e00e      	b.n	8003470 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <HAL_UART_IRQHandler+0x1f4>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8f8 	bl	800365c <UART_EndTransmit_IT>
    return;
 800346c:	e000      	b.n	8003470 <HAL_UART_IRQHandler+0x1f4>
    return;
 800346e:	bf00      	nop
  }
}
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	08003589 	.word	0x08003589

0800347c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	e02c      	b.n	8003524 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d028      	beq.n	8003524 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034d8:	f7fd fe20 	bl	800111c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d21d      	bcs.n	8003524 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e00f      	b.n	8003544 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	429a      	cmp	r2, r3
 8003540:	d0c3      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003562:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff ff7e 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b21      	cmp	r3, #33	; 0x21
 80035c2:	d144      	bne.n	800364e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035cc:	d11a      	bne.n	8003604 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]
 80035f6:	e00e      	b.n	8003616 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	621a      	str	r2, [r3, #32]
 8003602:	e008      	b.n	8003616 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	1c59      	adds	r1, r3, #1
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6211      	str	r1, [r2, #32]
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29b      	uxth	r3, r3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4619      	mov	r1, r3
 8003624:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003638:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003648:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fefd 	bl	800347c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b22      	cmp	r3, #34	; 0x22
 800369e:	d171      	bne.n	8003784 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d123      	bne.n	80036f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10e      	bne.n	80036d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
 80036d4:	e029      	b.n	800372a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
 80036f0:	e01b      	b.n	800372a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6858      	ldr	r0, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6291      	str	r1, [r2, #40]	; 0x28
 800370a:	b2c2      	uxtb	r2, r0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e00c      	b.n	800372a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	1c58      	adds	r0, r3, #1
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	6288      	str	r0, [r1, #40]	; 0x28
 8003722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4619      	mov	r1, r3
 8003738:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800373a:	2b00      	cmp	r3, #0
 800373c:	d120      	bne.n	8003780 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0220 	bic.w	r2, r2, #32
 800374c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800375c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fe8a 	bl	8003490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e002      	b.n	8003786 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003798:	af00      	add	r7, sp, #0
 800379a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ae:	68d9      	ldr	r1, [r3, #12]
 80037b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	ea40 0301 	orr.w	r3, r0, r1
 80037ba:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80037de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037ea:	f021 010c 	bic.w	r1, r1, #12
 80037ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80037f8:	430b      	orrs	r3, r1
 80037fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003808:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800380c:	6999      	ldr	r1, [r3, #24]
 800380e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	ea40 0301 	orr.w	r3, r0, r1
 8003818:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	f040 824a 	bne.w	8003cbc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003828:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b96      	ldr	r3, [pc, #600]	; (8003a88 <UART_SetConfig+0x2f8>)
 8003830:	429a      	cmp	r2, r3
 8003832:	d006      	beq.n	8003842 <UART_SetConfig+0xb2>
 8003834:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b94      	ldr	r3, [pc, #592]	; (8003a8c <UART_SetConfig+0x2fc>)
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 8129 	bne.w	8003a94 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003842:	f7ff fb7b 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 8003846:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800384a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800384e:	2200      	movs	r2, #0
 8003850:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003854:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003858:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800385c:	4622      	mov	r2, r4
 800385e:	462b      	mov	r3, r5
 8003860:	1891      	adds	r1, r2, r2
 8003862:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003866:	415b      	adcs	r3, r3
 8003868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800386c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003870:	4621      	mov	r1, r4
 8003872:	1851      	adds	r1, r2, r1
 8003874:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003878:	4629      	mov	r1, r5
 800387a:	414b      	adcs	r3, r1
 800387c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800388c:	4649      	mov	r1, r9
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4641      	mov	r1, r8
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4641      	mov	r1, r8
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4622      	mov	r2, r4
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80038a8:	462b      	mov	r3, r5
 80038aa:	460a      	mov	r2, r1
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80038b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80038c0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80038c4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80038c8:	460b      	mov	r3, r1
 80038ca:	18db      	adds	r3, r3, r3
 80038cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038d0:	4613      	mov	r3, r2
 80038d2:	eb42 0303 	adc.w	r3, r2, r3
 80038d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038da:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80038de:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80038e2:	f7fc fccd 	bl	8000280 <__aeabi_uldivmod>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4b69      	ldr	r3, [pc, #420]	; (8003a90 <UART_SetConfig+0x300>)
 80038ec:	fba3 2302 	umull	r2, r3, r3, r2
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	011c      	lsls	r4, r3, #4
 80038f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80038fe:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003902:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8003906:	4642      	mov	r2, r8
 8003908:	464b      	mov	r3, r9
 800390a:	1891      	adds	r1, r2, r2
 800390c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003910:	415b      	adcs	r3, r3
 8003912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003916:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800391a:	4641      	mov	r1, r8
 800391c:	1851      	adds	r1, r2, r1
 800391e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003922:	4649      	mov	r1, r9
 8003924:	414b      	adcs	r3, r1
 8003926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8003936:	4659      	mov	r1, fp
 8003938:	00cb      	lsls	r3, r1, #3
 800393a:	4651      	mov	r1, sl
 800393c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003940:	4651      	mov	r1, sl
 8003942:	00ca      	lsls	r2, r1, #3
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	4603      	mov	r3, r0
 800394a:	4642      	mov	r2, r8
 800394c:	189b      	adds	r3, r3, r2
 800394e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003952:	464b      	mov	r3, r9
 8003954:	460a      	mov	r2, r1
 8003956:	eb42 0303 	adc.w	r3, r2, r3
 800395a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800395e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800396a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800396e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8003972:	460b      	mov	r3, r1
 8003974:	18db      	adds	r3, r3, r3
 8003976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800397a:	4613      	mov	r3, r2
 800397c:	eb42 0303 	adc.w	r3, r2, r3
 8003980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003984:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003988:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800398c:	f7fc fc78 	bl	8000280 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4611      	mov	r1, r2
 8003996:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <UART_SetConfig+0x300>)
 8003998:	fba3 2301 	umull	r2, r3, r3, r1
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2264      	movs	r2, #100	; 0x64
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	1acb      	subs	r3, r1, r3
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039ac:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <UART_SetConfig+0x300>)
 80039ae:	fba3 2302 	umull	r2, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039ba:	441c      	add	r4, r3
 80039bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80039c6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80039ca:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80039ce:	4642      	mov	r2, r8
 80039d0:	464b      	mov	r3, r9
 80039d2:	1891      	adds	r1, r2, r2
 80039d4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80039d8:	415b      	adcs	r3, r3
 80039da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80039de:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80039e2:	4641      	mov	r1, r8
 80039e4:	1851      	adds	r1, r2, r1
 80039e6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80039ea:	4649      	mov	r1, r9
 80039ec:	414b      	adcs	r3, r1
 80039ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80039fe:	4659      	mov	r1, fp
 8003a00:	00cb      	lsls	r3, r1, #3
 8003a02:	4651      	mov	r1, sl
 8003a04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a08:	4651      	mov	r1, sl
 8003a0a:	00ca      	lsls	r2, r1, #3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4603      	mov	r3, r0
 8003a12:	4642      	mov	r2, r8
 8003a14:	189b      	adds	r3, r3, r2
 8003a16:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	eb42 0303 	adc.w	r3, r2, r3
 8003a22:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003a32:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8003a36:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	18db      	adds	r3, r3, r3
 8003a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a42:	4613      	mov	r3, r2
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a4c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003a50:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8003a54:	f7fc fc14 	bl	8000280 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <UART_SetConfig+0x300>)
 8003a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2164      	movs	r1, #100	; 0x64
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <UART_SetConfig+0x300>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	f003 0207 	and.w	r2, r3, #7
 8003a7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4422      	add	r2, r4
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	e34a      	b.n	800411e <UART_SetConfig+0x98e>
 8003a88:	40011000 	.word	0x40011000
 8003a8c:	40011400 	.word	0x40011400
 8003a90:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7ff fa3e 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8003a98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003aa6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8003aaa:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8003aae:	4622      	mov	r2, r4
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	1891      	adds	r1, r2, r2
 8003ab4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003abe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac8:	4629      	mov	r1, r5
 8003aca:	eb43 0b01 	adc.w	fp, r3, r1
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ada:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae2:	4692      	mov	sl, r2
 8003ae4:	469b      	mov	fp, r3
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	eb1a 0303 	adds.w	r3, sl, r3
 8003aec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003af0:	462b      	mov	r3, r5
 8003af2:	eb4b 0303 	adc.w	r3, fp, r3
 8003af6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003afa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003b06:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003b0a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8003b0e:	460b      	mov	r3, r1
 8003b10:	18db      	adds	r3, r3, r3
 8003b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b16:	4613      	mov	r3, r2
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003b24:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003b28:	f7fc fbaa 	bl	8000280 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <UART_SetConfig+0x528>)
 8003b32:	fba3 2302 	umull	r2, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	011c      	lsls	r4, r3, #4
 8003b3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003b44:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8003b48:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	1891      	adds	r1, r2, r2
 8003b52:	67b9      	str	r1, [r7, #120]	; 0x78
 8003b54:	415b      	adcs	r3, r3
 8003b56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b58:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	1851      	adds	r1, r2, r1
 8003b60:	6739      	str	r1, [r7, #112]	; 0x70
 8003b62:	4649      	mov	r1, r9
 8003b64:	414b      	adcs	r3, r1
 8003b66:	677b      	str	r3, [r7, #116]	; 0x74
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8003b74:	4659      	mov	r1, fp
 8003b76:	00cb      	lsls	r3, r1, #3
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7e:	4651      	mov	r1, sl
 8003b80:	00ca      	lsls	r2, r1, #3
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	4642      	mov	r2, r8
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003b90:	464b      	mov	r3, r9
 8003b92:	460a      	mov	r2, r1
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003b9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ba8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8003bac:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	18db      	adds	r3, r3, r3
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	eb42 0303 	adc.w	r3, r2, r3
 8003bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bbe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003bc2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bc6:	f7fc fb5b 	bl	8000280 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <UART_SetConfig+0x528>)
 8003bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2264      	movs	r2, #100	; 0x64
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	1acb      	subs	r3, r1, r3
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <UART_SetConfig+0x528>)
 8003be8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bf4:	441c      	add	r4, r3
 8003bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003c00:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003c04:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	1891      	adds	r1, r2, r2
 8003c0e:	6639      	str	r1, [r7, #96]	; 0x60
 8003c10:	415b      	adcs	r3, r3
 8003c12:	667b      	str	r3, [r7, #100]	; 0x64
 8003c14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c18:	4641      	mov	r1, r8
 8003c1a:	1851      	adds	r1, r2, r1
 8003c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c1e:	4649      	mov	r1, r9
 8003c20:	414b      	adcs	r3, r1
 8003c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003c30:	4659      	mov	r1, fp
 8003c32:	00cb      	lsls	r3, r1, #3
 8003c34:	4651      	mov	r1, sl
 8003c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	00ca      	lsls	r2, r1, #3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	4642      	mov	r2, r8
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	460a      	mov	r2, r1
 8003c50:	eb42 0303 	adc.w	r3, r2, r3
 8003c54:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003c58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003c64:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8003c68:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	18db      	adds	r3, r3, r3
 8003c70:	653b      	str	r3, [r7, #80]	; 0x50
 8003c72:	4613      	mov	r3, r2
 8003c74:	eb42 0303 	adc.w	r3, r2, r3
 8003c78:	657b      	str	r3, [r7, #84]	; 0x54
 8003c7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c7e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003c82:	f7fc fafd 	bl	8000280 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <UART_SetConfig+0x528>)
 8003c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	2164      	movs	r1, #100	; 0x64
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	4a06      	ldr	r2, [pc, #24]	; (8003cb8 <UART_SetConfig+0x528>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f003 0207 	and.w	r2, r3, #7
 8003caa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4422      	add	r2, r4
 8003cb2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cb4:	e233      	b.n	800411e <UART_SetConfig+0x98e>
 8003cb6:	bf00      	nop
 8003cb8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b8d      	ldr	r3, [pc, #564]	; (8003ef8 <UART_SetConfig+0x768>)
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d006      	beq.n	8003cd6 <UART_SetConfig+0x546>
 8003cc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b8b      	ldr	r3, [pc, #556]	; (8003efc <UART_SetConfig+0x76c>)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 8117 	bne.w	8003f04 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cd6:	f7ff f931 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 8003cda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003ce8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003cec:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	1891      	adds	r1, r2, r2
 8003cf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cf8:	415b      	adcs	r3, r3
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d00:	4621      	mov	r1, r4
 8003d02:	eb12 0801 	adds.w	r8, r2, r1
 8003d06:	4629      	mov	r1, r5
 8003d08:	eb43 0901 	adc.w	r9, r3, r1
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d20:	4690      	mov	r8, r2
 8003d22:	4699      	mov	r9, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	eb18 0303 	adds.w	r3, r8, r3
 8003d2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003d2e:	462b      	mov	r3, r5
 8003d30:	eb49 0303 	adc.w	r3, r9, r3
 8003d34:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003d38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d44:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8003d54:	4629      	mov	r1, r5
 8003d56:	008b      	lsls	r3, r1, #2
 8003d58:	4621      	mov	r1, r4
 8003d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5e:	4621      	mov	r1, r4
 8003d60:	008a      	lsls	r2, r1, #2
 8003d62:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003d66:	f7fc fa8b 	bl	8000280 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4b64      	ldr	r3, [pc, #400]	; (8003f00 <UART_SetConfig+0x770>)
 8003d70:	fba3 2302 	umull	r2, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	011c      	lsls	r4, r3, #4
 8003d78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003d82:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003d86:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8003d8a:	4642      	mov	r2, r8
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	1891      	adds	r1, r2, r2
 8003d90:	6439      	str	r1, [r7, #64]	; 0x40
 8003d92:	415b      	adcs	r3, r3
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
 8003d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	1851      	adds	r1, r2, r1
 8003d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003da0:	4649      	mov	r1, r9
 8003da2:	414b      	adcs	r3, r1
 8003da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8003db2:	4659      	mov	r1, fp
 8003db4:	00cb      	lsls	r3, r1, #3
 8003db6:	4651      	mov	r1, sl
 8003db8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	00ca      	lsls	r2, r1, #3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	189b      	adds	r3, r3, r2
 8003dca:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003dce:	464b      	mov	r3, r9
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	eb42 0303 	adc.w	r3, r2, r3
 8003dd6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003dda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003de6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8003df6:	4649      	mov	r1, r9
 8003df8:	008b      	lsls	r3, r1, #2
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e00:	4641      	mov	r1, r8
 8003e02:	008a      	lsls	r2, r1, #2
 8003e04:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003e08:	f7fc fa3a 	bl	8000280 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4611      	mov	r1, r2
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <UART_SetConfig+0x770>)
 8003e14:	fba3 2301 	umull	r2, r3, r3, r1
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2264      	movs	r2, #100	; 0x64
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	1acb      	subs	r3, r1, r3
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a36      	ldr	r2, [pc, #216]	; (8003f00 <UART_SetConfig+0x770>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e32:	441c      	add	r4, r3
 8003e34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003e3e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8003e42:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
 8003e52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e56:	4641      	mov	r1, r8
 8003e58:	1851      	adds	r1, r2, r1
 8003e5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	414b      	adcs	r3, r1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8003e6e:	4659      	mov	r1, fp
 8003e70:	00cb      	lsls	r3, r1, #3
 8003e72:	4651      	mov	r1, sl
 8003e74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e78:	4651      	mov	r1, sl
 8003e7a:	00ca      	lsls	r2, r1, #3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4603      	mov	r3, r0
 8003e82:	4642      	mov	r2, r8
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	eb42 0303 	adc.w	r3, r2, r3
 8003e92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003e96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ea2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	008b      	lsls	r3, r1, #2
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	008a      	lsls	r2, r1, #2
 8003ec0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003ec4:	f7fc f9dc 	bl	8000280 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <UART_SetConfig+0x770>)
 8003ece:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2164      	movs	r1, #100	; 0x64
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	3332      	adds	r3, #50	; 0x32
 8003ee0:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <UART_SetConfig+0x770>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	f003 020f 	and.w	r2, r3, #15
 8003eec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4422      	add	r2, r4
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	e112      	b.n	800411e <UART_SetConfig+0x98e>
 8003ef8:	40011000 	.word	0x40011000
 8003efc:	40011400 	.word	0x40011400
 8003f00:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7ff f806 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8003f08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003f16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003f1a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	1891      	adds	r1, r2, r2
 8003f24:	6239      	str	r1, [r7, #32]
 8003f26:	415b      	adcs	r3, r3
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f2e:	4641      	mov	r1, r8
 8003f30:	1854      	adds	r4, r2, r1
 8003f32:	4649      	mov	r1, r9
 8003f34:	eb43 0501 	adc.w	r5, r3, r1
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	00eb      	lsls	r3, r5, #3
 8003f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f46:	00e2      	lsls	r2, r4, #3
 8003f48:	4614      	mov	r4, r2
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	18e3      	adds	r3, r4, r3
 8003f50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003f54:	464b      	mov	r3, r9
 8003f56:	eb45 0303 	adc.w	r3, r5, r3
 8003f5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	008b      	lsls	r3, r1, #2
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f84:	4621      	mov	r1, r4
 8003f86:	008a      	lsls	r2, r1, #2
 8003f88:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003f8c:	f7fc f978 	bl	8000280 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4b65      	ldr	r3, [pc, #404]	; (800412c <UART_SetConfig+0x99c>)
 8003f96:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	011c      	lsls	r4, r3, #4
 8003f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003fa8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003fac:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	61b9      	str	r1, [r7, #24]
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	1851      	adds	r1, r2, r1
 8003fc4:	6139      	str	r1, [r7, #16]
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	414b      	adcs	r3, r1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	00cb      	lsls	r3, r1, #3
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	00ca      	lsls	r2, r1, #3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	4642      	mov	r2, r8
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004000:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800400c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800401c:	4649      	mov	r1, r9
 800401e:	008b      	lsls	r3, r1, #2
 8004020:	4641      	mov	r1, r8
 8004022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004026:	4641      	mov	r1, r8
 8004028:	008a      	lsls	r2, r1, #2
 800402a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800402e:	f7fc f927 	bl	8000280 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4611      	mov	r1, r2
 8004038:	4b3c      	ldr	r3, [pc, #240]	; (800412c <UART_SetConfig+0x99c>)
 800403a:	fba3 2301 	umull	r2, r3, r3, r1
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2264      	movs	r2, #100	; 0x64
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	3332      	adds	r3, #50	; 0x32
 800404c:	4a37      	ldr	r2, [pc, #220]	; (800412c <UART_SetConfig+0x99c>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004058:	441c      	add	r4, r3
 800405a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004064:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004068:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	1891      	adds	r1, r2, r2
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	415b      	adcs	r3, r3
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800407c:	4641      	mov	r1, r8
 800407e:	1851      	adds	r1, r2, r1
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	4649      	mov	r1, r9
 8004084:	414b      	adcs	r3, r1
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004094:	4659      	mov	r1, fp
 8004096:	00cb      	lsls	r3, r1, #3
 8004098:	4651      	mov	r1, sl
 800409a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409e:	4651      	mov	r1, sl
 80040a0:	00ca      	lsls	r2, r1, #3
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	4642      	mov	r2, r8
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040b0:	464b      	mov	r3, r9
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040c8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80040d8:	4649      	mov	r1, r9
 80040da:	008b      	lsls	r3, r1, #2
 80040dc:	4641      	mov	r1, r8
 80040de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e2:	4641      	mov	r1, r8
 80040e4:	008a      	lsls	r2, r1, #2
 80040e6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040ea:	f7fc f8c9 	bl	8000280 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <UART_SetConfig+0x99c>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <UART_SetConfig+0x99c>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4422      	add	r2, r4
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	e7ff      	b.n	800411e <UART_SetConfig+0x98e>
 800411e:	bf00      	nop
 8004120:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	51eb851f 	.word	0x51eb851f

08004130 <siprintf>:
 8004130:	b40e      	push	{r1, r2, r3}
 8004132:	b500      	push	{lr}
 8004134:	b09c      	sub	sp, #112	; 0x70
 8004136:	ab1d      	add	r3, sp, #116	; 0x74
 8004138:	9002      	str	r0, [sp, #8]
 800413a:	9006      	str	r0, [sp, #24]
 800413c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004140:	4809      	ldr	r0, [pc, #36]	; (8004168 <siprintf+0x38>)
 8004142:	9107      	str	r1, [sp, #28]
 8004144:	9104      	str	r1, [sp, #16]
 8004146:	4909      	ldr	r1, [pc, #36]	; (800416c <siprintf+0x3c>)
 8004148:	f853 2b04 	ldr.w	r2, [r3], #4
 800414c:	9105      	str	r1, [sp, #20]
 800414e:	6800      	ldr	r0, [r0, #0]
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	a902      	add	r1, sp, #8
 8004154:	f000 f9b6 	bl	80044c4 <_svfiprintf_r>
 8004158:	9b02      	ldr	r3, [sp, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	b01c      	add	sp, #112	; 0x70
 8004160:	f85d eb04 	ldr.w	lr, [sp], #4
 8004164:	b003      	add	sp, #12
 8004166:	4770      	bx	lr
 8004168:	20000058 	.word	0x20000058
 800416c:	ffff0208 	.word	0xffff0208

08004170 <memset>:
 8004170:	4402      	add	r2, r0
 8004172:	4603      	mov	r3, r0
 8004174:	4293      	cmp	r3, r2
 8004176:	d100      	bne.n	800417a <memset+0xa>
 8004178:	4770      	bx	lr
 800417a:	f803 1b01 	strb.w	r1, [r3], #1
 800417e:	e7f9      	b.n	8004174 <memset+0x4>

08004180 <strstr>:
 8004180:	780a      	ldrb	r2, [r1, #0]
 8004182:	b570      	push	{r4, r5, r6, lr}
 8004184:	b96a      	cbnz	r2, 80041a2 <strstr+0x22>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	429a      	cmp	r2, r3
 800418a:	d109      	bne.n	80041a0 <strstr+0x20>
 800418c:	460c      	mov	r4, r1
 800418e:	4605      	mov	r5, r0
 8004190:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f6      	beq.n	8004186 <strstr+0x6>
 8004198:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800419c:	429e      	cmp	r6, r3
 800419e:	d0f7      	beq.n	8004190 <strstr+0x10>
 80041a0:	3001      	adds	r0, #1
 80041a2:	7803      	ldrb	r3, [r0, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ef      	bne.n	8004188 <strstr+0x8>
 80041a8:	4618      	mov	r0, r3
 80041aa:	e7ec      	b.n	8004186 <strstr+0x6>

080041ac <__errno>:
 80041ac:	4b01      	ldr	r3, [pc, #4]	; (80041b4 <__errno+0x8>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000058 	.word	0x20000058

080041b8 <__libc_init_array>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	4d0d      	ldr	r5, [pc, #52]	; (80041f0 <__libc_init_array+0x38>)
 80041bc:	4c0d      	ldr	r4, [pc, #52]	; (80041f4 <__libc_init_array+0x3c>)
 80041be:	1b64      	subs	r4, r4, r5
 80041c0:	10a4      	asrs	r4, r4, #2
 80041c2:	2600      	movs	r6, #0
 80041c4:	42a6      	cmp	r6, r4
 80041c6:	d109      	bne.n	80041dc <__libc_init_array+0x24>
 80041c8:	4d0b      	ldr	r5, [pc, #44]	; (80041f8 <__libc_init_array+0x40>)
 80041ca:	4c0c      	ldr	r4, [pc, #48]	; (80041fc <__libc_init_array+0x44>)
 80041cc:	f000 fc6a 	bl	8004aa4 <_init>
 80041d0:	1b64      	subs	r4, r4, r5
 80041d2:	10a4      	asrs	r4, r4, #2
 80041d4:	2600      	movs	r6, #0
 80041d6:	42a6      	cmp	r6, r4
 80041d8:	d105      	bne.n	80041e6 <__libc_init_array+0x2e>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e0:	4798      	blx	r3
 80041e2:	3601      	adds	r6, #1
 80041e4:	e7ee      	b.n	80041c4 <__libc_init_array+0xc>
 80041e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ea:	4798      	blx	r3
 80041ec:	3601      	adds	r6, #1
 80041ee:	e7f2      	b.n	80041d6 <__libc_init_array+0x1e>
 80041f0:	08004c54 	.word	0x08004c54
 80041f4:	08004c54 	.word	0x08004c54
 80041f8:	08004c54 	.word	0x08004c54
 80041fc:	08004c58 	.word	0x08004c58

08004200 <__retarget_lock_acquire_recursive>:
 8004200:	4770      	bx	lr

08004202 <__retarget_lock_release_recursive>:
 8004202:	4770      	bx	lr

08004204 <memcpy>:
 8004204:	440a      	add	r2, r1
 8004206:	4291      	cmp	r1, r2
 8004208:	f100 33ff 	add.w	r3, r0, #4294967295
 800420c:	d100      	bne.n	8004210 <memcpy+0xc>
 800420e:	4770      	bx	lr
 8004210:	b510      	push	{r4, lr}
 8004212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800421a:	4291      	cmp	r1, r2
 800421c:	d1f9      	bne.n	8004212 <memcpy+0xe>
 800421e:	bd10      	pop	{r4, pc}

08004220 <_free_r>:
 8004220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004222:	2900      	cmp	r1, #0
 8004224:	d044      	beq.n	80042b0 <_free_r+0x90>
 8004226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422a:	9001      	str	r0, [sp, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f1a1 0404 	sub.w	r4, r1, #4
 8004232:	bfb8      	it	lt
 8004234:	18e4      	addlt	r4, r4, r3
 8004236:	f000 f8df 	bl	80043f8 <__malloc_lock>
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <_free_r+0x94>)
 800423c:	9801      	ldr	r0, [sp, #4]
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	b933      	cbnz	r3, 8004250 <_free_r+0x30>
 8004242:	6063      	str	r3, [r4, #4]
 8004244:	6014      	str	r4, [r2, #0]
 8004246:	b003      	add	sp, #12
 8004248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800424c:	f000 b8da 	b.w	8004404 <__malloc_unlock>
 8004250:	42a3      	cmp	r3, r4
 8004252:	d908      	bls.n	8004266 <_free_r+0x46>
 8004254:	6825      	ldr	r5, [r4, #0]
 8004256:	1961      	adds	r1, r4, r5
 8004258:	428b      	cmp	r3, r1
 800425a:	bf01      	itttt	eq
 800425c:	6819      	ldreq	r1, [r3, #0]
 800425e:	685b      	ldreq	r3, [r3, #4]
 8004260:	1949      	addeq	r1, r1, r5
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	e7ed      	b.n	8004242 <_free_r+0x22>
 8004266:	461a      	mov	r2, r3
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b10b      	cbz	r3, 8004270 <_free_r+0x50>
 800426c:	42a3      	cmp	r3, r4
 800426e:	d9fa      	bls.n	8004266 <_free_r+0x46>
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	1855      	adds	r5, r2, r1
 8004274:	42a5      	cmp	r5, r4
 8004276:	d10b      	bne.n	8004290 <_free_r+0x70>
 8004278:	6824      	ldr	r4, [r4, #0]
 800427a:	4421      	add	r1, r4
 800427c:	1854      	adds	r4, r2, r1
 800427e:	42a3      	cmp	r3, r4
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	d1e0      	bne.n	8004246 <_free_r+0x26>
 8004284:	681c      	ldr	r4, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	6053      	str	r3, [r2, #4]
 800428a:	440c      	add	r4, r1
 800428c:	6014      	str	r4, [r2, #0]
 800428e:	e7da      	b.n	8004246 <_free_r+0x26>
 8004290:	d902      	bls.n	8004298 <_free_r+0x78>
 8004292:	230c      	movs	r3, #12
 8004294:	6003      	str	r3, [r0, #0]
 8004296:	e7d6      	b.n	8004246 <_free_r+0x26>
 8004298:	6825      	ldr	r5, [r4, #0]
 800429a:	1961      	adds	r1, r4, r5
 800429c:	428b      	cmp	r3, r1
 800429e:	bf04      	itt	eq
 80042a0:	6819      	ldreq	r1, [r3, #0]
 80042a2:	685b      	ldreq	r3, [r3, #4]
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	bf04      	itt	eq
 80042a8:	1949      	addeq	r1, r1, r5
 80042aa:	6021      	streq	r1, [r4, #0]
 80042ac:	6054      	str	r4, [r2, #4]
 80042ae:	e7ca      	b.n	8004246 <_free_r+0x26>
 80042b0:	b003      	add	sp, #12
 80042b2:	bd30      	pop	{r4, r5, pc}
 80042b4:	200005dc 	.word	0x200005dc

080042b8 <sbrk_aligned>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4e0e      	ldr	r6, [pc, #56]	; (80042f4 <sbrk_aligned+0x3c>)
 80042bc:	460c      	mov	r4, r1
 80042be:	6831      	ldr	r1, [r6, #0]
 80042c0:	4605      	mov	r5, r0
 80042c2:	b911      	cbnz	r1, 80042ca <sbrk_aligned+0x12>
 80042c4:	f000 fba6 	bl	8004a14 <_sbrk_r>
 80042c8:	6030      	str	r0, [r6, #0]
 80042ca:	4621      	mov	r1, r4
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 fba1 	bl	8004a14 <_sbrk_r>
 80042d2:	1c43      	adds	r3, r0, #1
 80042d4:	d00a      	beq.n	80042ec <sbrk_aligned+0x34>
 80042d6:	1cc4      	adds	r4, r0, #3
 80042d8:	f024 0403 	bic.w	r4, r4, #3
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d007      	beq.n	80042f0 <sbrk_aligned+0x38>
 80042e0:	1a21      	subs	r1, r4, r0
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 fb96 	bl	8004a14 <_sbrk_r>
 80042e8:	3001      	adds	r0, #1
 80042ea:	d101      	bne.n	80042f0 <sbrk_aligned+0x38>
 80042ec:	f04f 34ff 	mov.w	r4, #4294967295
 80042f0:	4620      	mov	r0, r4
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	200005e0 	.word	0x200005e0

080042f8 <_malloc_r>:
 80042f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042fc:	1ccd      	adds	r5, r1, #3
 80042fe:	f025 0503 	bic.w	r5, r5, #3
 8004302:	3508      	adds	r5, #8
 8004304:	2d0c      	cmp	r5, #12
 8004306:	bf38      	it	cc
 8004308:	250c      	movcc	r5, #12
 800430a:	2d00      	cmp	r5, #0
 800430c:	4607      	mov	r7, r0
 800430e:	db01      	blt.n	8004314 <_malloc_r+0x1c>
 8004310:	42a9      	cmp	r1, r5
 8004312:	d905      	bls.n	8004320 <_malloc_r+0x28>
 8004314:	230c      	movs	r3, #12
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	2600      	movs	r6, #0
 800431a:	4630      	mov	r0, r6
 800431c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043f4 <_malloc_r+0xfc>
 8004324:	f000 f868 	bl	80043f8 <__malloc_lock>
 8004328:	f8d8 3000 	ldr.w	r3, [r8]
 800432c:	461c      	mov	r4, r3
 800432e:	bb5c      	cbnz	r4, 8004388 <_malloc_r+0x90>
 8004330:	4629      	mov	r1, r5
 8004332:	4638      	mov	r0, r7
 8004334:	f7ff ffc0 	bl	80042b8 <sbrk_aligned>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	4604      	mov	r4, r0
 800433c:	d155      	bne.n	80043ea <_malloc_r+0xf2>
 800433e:	f8d8 4000 	ldr.w	r4, [r8]
 8004342:	4626      	mov	r6, r4
 8004344:	2e00      	cmp	r6, #0
 8004346:	d145      	bne.n	80043d4 <_malloc_r+0xdc>
 8004348:	2c00      	cmp	r4, #0
 800434a:	d048      	beq.n	80043de <_malloc_r+0xe6>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	4631      	mov	r1, r6
 8004350:	4638      	mov	r0, r7
 8004352:	eb04 0903 	add.w	r9, r4, r3
 8004356:	f000 fb5d 	bl	8004a14 <_sbrk_r>
 800435a:	4581      	cmp	r9, r0
 800435c:	d13f      	bne.n	80043de <_malloc_r+0xe6>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	1a6d      	subs	r5, r5, r1
 8004362:	4629      	mov	r1, r5
 8004364:	4638      	mov	r0, r7
 8004366:	f7ff ffa7 	bl	80042b8 <sbrk_aligned>
 800436a:	3001      	adds	r0, #1
 800436c:	d037      	beq.n	80043de <_malloc_r+0xe6>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	442b      	add	r3, r5
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	f8d8 3000 	ldr.w	r3, [r8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d038      	beq.n	80043ee <_malloc_r+0xf6>
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	42a2      	cmp	r2, r4
 8004380:	d12b      	bne.n	80043da <_malloc_r+0xe2>
 8004382:	2200      	movs	r2, #0
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	e00f      	b.n	80043a8 <_malloc_r+0xb0>
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	1b52      	subs	r2, r2, r5
 800438c:	d41f      	bmi.n	80043ce <_malloc_r+0xd6>
 800438e:	2a0b      	cmp	r2, #11
 8004390:	d917      	bls.n	80043c2 <_malloc_r+0xca>
 8004392:	1961      	adds	r1, r4, r5
 8004394:	42a3      	cmp	r3, r4
 8004396:	6025      	str	r5, [r4, #0]
 8004398:	bf18      	it	ne
 800439a:	6059      	strne	r1, [r3, #4]
 800439c:	6863      	ldr	r3, [r4, #4]
 800439e:	bf08      	it	eq
 80043a0:	f8c8 1000 	streq.w	r1, [r8]
 80043a4:	5162      	str	r2, [r4, r5]
 80043a6:	604b      	str	r3, [r1, #4]
 80043a8:	4638      	mov	r0, r7
 80043aa:	f104 060b 	add.w	r6, r4, #11
 80043ae:	f000 f829 	bl	8004404 <__malloc_unlock>
 80043b2:	f026 0607 	bic.w	r6, r6, #7
 80043b6:	1d23      	adds	r3, r4, #4
 80043b8:	1af2      	subs	r2, r6, r3
 80043ba:	d0ae      	beq.n	800431a <_malloc_r+0x22>
 80043bc:	1b9b      	subs	r3, r3, r6
 80043be:	50a3      	str	r3, [r4, r2]
 80043c0:	e7ab      	b.n	800431a <_malloc_r+0x22>
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	6862      	ldr	r2, [r4, #4]
 80043c6:	d1dd      	bne.n	8004384 <_malloc_r+0x8c>
 80043c8:	f8c8 2000 	str.w	r2, [r8]
 80043cc:	e7ec      	b.n	80043a8 <_malloc_r+0xb0>
 80043ce:	4623      	mov	r3, r4
 80043d0:	6864      	ldr	r4, [r4, #4]
 80043d2:	e7ac      	b.n	800432e <_malloc_r+0x36>
 80043d4:	4634      	mov	r4, r6
 80043d6:	6876      	ldr	r6, [r6, #4]
 80043d8:	e7b4      	b.n	8004344 <_malloc_r+0x4c>
 80043da:	4613      	mov	r3, r2
 80043dc:	e7cc      	b.n	8004378 <_malloc_r+0x80>
 80043de:	230c      	movs	r3, #12
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	4638      	mov	r0, r7
 80043e4:	f000 f80e 	bl	8004404 <__malloc_unlock>
 80043e8:	e797      	b.n	800431a <_malloc_r+0x22>
 80043ea:	6025      	str	r5, [r4, #0]
 80043ec:	e7dc      	b.n	80043a8 <_malloc_r+0xb0>
 80043ee:	605b      	str	r3, [r3, #4]
 80043f0:	deff      	udf	#255	; 0xff
 80043f2:	bf00      	nop
 80043f4:	200005dc 	.word	0x200005dc

080043f8 <__malloc_lock>:
 80043f8:	4801      	ldr	r0, [pc, #4]	; (8004400 <__malloc_lock+0x8>)
 80043fa:	f7ff bf01 	b.w	8004200 <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	200005d8 	.word	0x200005d8

08004404 <__malloc_unlock>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__malloc_unlock+0x8>)
 8004406:	f7ff befc 	b.w	8004202 <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	200005d8 	.word	0x200005d8

08004410 <__ssputs_r>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	688e      	ldr	r6, [r1, #8]
 8004416:	461f      	mov	r7, r3
 8004418:	42be      	cmp	r6, r7
 800441a:	680b      	ldr	r3, [r1, #0]
 800441c:	4682      	mov	sl, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4690      	mov	r8, r2
 8004422:	d82c      	bhi.n	800447e <__ssputs_r+0x6e>
 8004424:	898a      	ldrh	r2, [r1, #12]
 8004426:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800442a:	d026      	beq.n	800447a <__ssputs_r+0x6a>
 800442c:	6965      	ldr	r5, [r4, #20]
 800442e:	6909      	ldr	r1, [r1, #16]
 8004430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004434:	eba3 0901 	sub.w	r9, r3, r1
 8004438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800443c:	1c7b      	adds	r3, r7, #1
 800443e:	444b      	add	r3, r9
 8004440:	106d      	asrs	r5, r5, #1
 8004442:	429d      	cmp	r5, r3
 8004444:	bf38      	it	cc
 8004446:	461d      	movcc	r5, r3
 8004448:	0553      	lsls	r3, r2, #21
 800444a:	d527      	bpl.n	800449c <__ssputs_r+0x8c>
 800444c:	4629      	mov	r1, r5
 800444e:	f7ff ff53 	bl	80042f8 <_malloc_r>
 8004452:	4606      	mov	r6, r0
 8004454:	b360      	cbz	r0, 80044b0 <__ssputs_r+0xa0>
 8004456:	6921      	ldr	r1, [r4, #16]
 8004458:	464a      	mov	r2, r9
 800445a:	f7ff fed3 	bl	8004204 <memcpy>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004468:	81a3      	strh	r3, [r4, #12]
 800446a:	6126      	str	r6, [r4, #16]
 800446c:	6165      	str	r5, [r4, #20]
 800446e:	444e      	add	r6, r9
 8004470:	eba5 0509 	sub.w	r5, r5, r9
 8004474:	6026      	str	r6, [r4, #0]
 8004476:	60a5      	str	r5, [r4, #8]
 8004478:	463e      	mov	r6, r7
 800447a:	42be      	cmp	r6, r7
 800447c:	d900      	bls.n	8004480 <__ssputs_r+0x70>
 800447e:	463e      	mov	r6, r7
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	4632      	mov	r2, r6
 8004484:	4641      	mov	r1, r8
 8004486:	f000 faab 	bl	80049e0 <memmove>
 800448a:	68a3      	ldr	r3, [r4, #8]
 800448c:	1b9b      	subs	r3, r3, r6
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	4433      	add	r3, r6
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	2000      	movs	r0, #0
 8004498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449c:	462a      	mov	r2, r5
 800449e:	f000 fac9 	bl	8004a34 <_realloc_r>
 80044a2:	4606      	mov	r6, r0
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d1e0      	bne.n	800446a <__ssputs_r+0x5a>
 80044a8:	6921      	ldr	r1, [r4, #16]
 80044aa:	4650      	mov	r0, sl
 80044ac:	f7ff feb8 	bl	8004220 <_free_r>
 80044b0:	230c      	movs	r3, #12
 80044b2:	f8ca 3000 	str.w	r3, [sl]
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	f04f 30ff 	mov.w	r0, #4294967295
 80044c2:	e7e9      	b.n	8004498 <__ssputs_r+0x88>

080044c4 <_svfiprintf_r>:
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	4698      	mov	r8, r3
 80044ca:	898b      	ldrh	r3, [r1, #12]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	b09d      	sub	sp, #116	; 0x74
 80044d0:	4607      	mov	r7, r0
 80044d2:	460d      	mov	r5, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	d50e      	bpl.n	80044f6 <_svfiprintf_r+0x32>
 80044d8:	690b      	ldr	r3, [r1, #16]
 80044da:	b963      	cbnz	r3, 80044f6 <_svfiprintf_r+0x32>
 80044dc:	2140      	movs	r1, #64	; 0x40
 80044de:	f7ff ff0b 	bl	80042f8 <_malloc_r>
 80044e2:	6028      	str	r0, [r5, #0]
 80044e4:	6128      	str	r0, [r5, #16]
 80044e6:	b920      	cbnz	r0, 80044f2 <_svfiprintf_r+0x2e>
 80044e8:	230c      	movs	r3, #12
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e0d0      	b.n	8004694 <_svfiprintf_r+0x1d0>
 80044f2:	2340      	movs	r3, #64	; 0x40
 80044f4:	616b      	str	r3, [r5, #20]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9309      	str	r3, [sp, #36]	; 0x24
 80044fa:	2320      	movs	r3, #32
 80044fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004500:	f8cd 800c 	str.w	r8, [sp, #12]
 8004504:	2330      	movs	r3, #48	; 0x30
 8004506:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046ac <_svfiprintf_r+0x1e8>
 800450a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800450e:	f04f 0901 	mov.w	r9, #1
 8004512:	4623      	mov	r3, r4
 8004514:	469a      	mov	sl, r3
 8004516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451a:	b10a      	cbz	r2, 8004520 <_svfiprintf_r+0x5c>
 800451c:	2a25      	cmp	r2, #37	; 0x25
 800451e:	d1f9      	bne.n	8004514 <_svfiprintf_r+0x50>
 8004520:	ebba 0b04 	subs.w	fp, sl, r4
 8004524:	d00b      	beq.n	800453e <_svfiprintf_r+0x7a>
 8004526:	465b      	mov	r3, fp
 8004528:	4622      	mov	r2, r4
 800452a:	4629      	mov	r1, r5
 800452c:	4638      	mov	r0, r7
 800452e:	f7ff ff6f 	bl	8004410 <__ssputs_r>
 8004532:	3001      	adds	r0, #1
 8004534:	f000 80a9 	beq.w	800468a <_svfiprintf_r+0x1c6>
 8004538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800453a:	445a      	add	r2, fp
 800453c:	9209      	str	r2, [sp, #36]	; 0x24
 800453e:	f89a 3000 	ldrb.w	r3, [sl]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a1 	beq.w	800468a <_svfiprintf_r+0x1c6>
 8004548:	2300      	movs	r3, #0
 800454a:	f04f 32ff 	mov.w	r2, #4294967295
 800454e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004552:	f10a 0a01 	add.w	sl, sl, #1
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9307      	str	r3, [sp, #28]
 800455a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800455e:	931a      	str	r3, [sp, #104]	; 0x68
 8004560:	4654      	mov	r4, sl
 8004562:	2205      	movs	r2, #5
 8004564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004568:	4850      	ldr	r0, [pc, #320]	; (80046ac <_svfiprintf_r+0x1e8>)
 800456a:	f7fb fe39 	bl	80001e0 <memchr>
 800456e:	9a04      	ldr	r2, [sp, #16]
 8004570:	b9d8      	cbnz	r0, 80045aa <_svfiprintf_r+0xe6>
 8004572:	06d0      	lsls	r0, r2, #27
 8004574:	bf44      	itt	mi
 8004576:	2320      	movmi	r3, #32
 8004578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457c:	0711      	lsls	r1, r2, #28
 800457e:	bf44      	itt	mi
 8004580:	232b      	movmi	r3, #43	; 0x2b
 8004582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004586:	f89a 3000 	ldrb.w	r3, [sl]
 800458a:	2b2a      	cmp	r3, #42	; 0x2a
 800458c:	d015      	beq.n	80045ba <_svfiprintf_r+0xf6>
 800458e:	9a07      	ldr	r2, [sp, #28]
 8004590:	4654      	mov	r4, sl
 8004592:	2000      	movs	r0, #0
 8004594:	f04f 0c0a 	mov.w	ip, #10
 8004598:	4621      	mov	r1, r4
 800459a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800459e:	3b30      	subs	r3, #48	; 0x30
 80045a0:	2b09      	cmp	r3, #9
 80045a2:	d94d      	bls.n	8004640 <_svfiprintf_r+0x17c>
 80045a4:	b1b0      	cbz	r0, 80045d4 <_svfiprintf_r+0x110>
 80045a6:	9207      	str	r2, [sp, #28]
 80045a8:	e014      	b.n	80045d4 <_svfiprintf_r+0x110>
 80045aa:	eba0 0308 	sub.w	r3, r0, r8
 80045ae:	fa09 f303 	lsl.w	r3, r9, r3
 80045b2:	4313      	orrs	r3, r2
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	46a2      	mov	sl, r4
 80045b8:	e7d2      	b.n	8004560 <_svfiprintf_r+0x9c>
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	1d19      	adds	r1, r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	9103      	str	r1, [sp, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bfbb      	ittet	lt
 80045c6:	425b      	neglt	r3, r3
 80045c8:	f042 0202 	orrlt.w	r2, r2, #2
 80045cc:	9307      	strge	r3, [sp, #28]
 80045ce:	9307      	strlt	r3, [sp, #28]
 80045d0:	bfb8      	it	lt
 80045d2:	9204      	strlt	r2, [sp, #16]
 80045d4:	7823      	ldrb	r3, [r4, #0]
 80045d6:	2b2e      	cmp	r3, #46	; 0x2e
 80045d8:	d10c      	bne.n	80045f4 <_svfiprintf_r+0x130>
 80045da:	7863      	ldrb	r3, [r4, #1]
 80045dc:	2b2a      	cmp	r3, #42	; 0x2a
 80045de:	d134      	bne.n	800464a <_svfiprintf_r+0x186>
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	1d1a      	adds	r2, r3, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	9203      	str	r2, [sp, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfb8      	it	lt
 80045ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f0:	3402      	adds	r4, #2
 80045f2:	9305      	str	r3, [sp, #20]
 80045f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80046bc <_svfiprintf_r+0x1f8>
 80045f8:	7821      	ldrb	r1, [r4, #0]
 80045fa:	2203      	movs	r2, #3
 80045fc:	4650      	mov	r0, sl
 80045fe:	f7fb fdef 	bl	80001e0 <memchr>
 8004602:	b138      	cbz	r0, 8004614 <_svfiprintf_r+0x150>
 8004604:	9b04      	ldr	r3, [sp, #16]
 8004606:	eba0 000a 	sub.w	r0, r0, sl
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	4082      	lsls	r2, r0
 800460e:	4313      	orrs	r3, r2
 8004610:	3401      	adds	r4, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004618:	4825      	ldr	r0, [pc, #148]	; (80046b0 <_svfiprintf_r+0x1ec>)
 800461a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800461e:	2206      	movs	r2, #6
 8004620:	f7fb fdde 	bl	80001e0 <memchr>
 8004624:	2800      	cmp	r0, #0
 8004626:	d038      	beq.n	800469a <_svfiprintf_r+0x1d6>
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <_svfiprintf_r+0x1f0>)
 800462a:	bb1b      	cbnz	r3, 8004674 <_svfiprintf_r+0x1b0>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	3307      	adds	r3, #7
 8004630:	f023 0307 	bic.w	r3, r3, #7
 8004634:	3308      	adds	r3, #8
 8004636:	9303      	str	r3, [sp, #12]
 8004638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463a:	4433      	add	r3, r6
 800463c:	9309      	str	r3, [sp, #36]	; 0x24
 800463e:	e768      	b.n	8004512 <_svfiprintf_r+0x4e>
 8004640:	fb0c 3202 	mla	r2, ip, r2, r3
 8004644:	460c      	mov	r4, r1
 8004646:	2001      	movs	r0, #1
 8004648:	e7a6      	b.n	8004598 <_svfiprintf_r+0xd4>
 800464a:	2300      	movs	r3, #0
 800464c:	3401      	adds	r4, #1
 800464e:	9305      	str	r3, [sp, #20]
 8004650:	4619      	mov	r1, r3
 8004652:	f04f 0c0a 	mov.w	ip, #10
 8004656:	4620      	mov	r0, r4
 8004658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465c:	3a30      	subs	r2, #48	; 0x30
 800465e:	2a09      	cmp	r2, #9
 8004660:	d903      	bls.n	800466a <_svfiprintf_r+0x1a6>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0c6      	beq.n	80045f4 <_svfiprintf_r+0x130>
 8004666:	9105      	str	r1, [sp, #20]
 8004668:	e7c4      	b.n	80045f4 <_svfiprintf_r+0x130>
 800466a:	fb0c 2101 	mla	r1, ip, r1, r2
 800466e:	4604      	mov	r4, r0
 8004670:	2301      	movs	r3, #1
 8004672:	e7f0      	b.n	8004656 <_svfiprintf_r+0x192>
 8004674:	ab03      	add	r3, sp, #12
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	462a      	mov	r2, r5
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <_svfiprintf_r+0x1f4>)
 800467c:	a904      	add	r1, sp, #16
 800467e:	4638      	mov	r0, r7
 8004680:	f3af 8000 	nop.w
 8004684:	1c42      	adds	r2, r0, #1
 8004686:	4606      	mov	r6, r0
 8004688:	d1d6      	bne.n	8004638 <_svfiprintf_r+0x174>
 800468a:	89ab      	ldrh	r3, [r5, #12]
 800468c:	065b      	lsls	r3, r3, #25
 800468e:	f53f af2d 	bmi.w	80044ec <_svfiprintf_r+0x28>
 8004692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004694:	b01d      	add	sp, #116	; 0x74
 8004696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469a:	ab03      	add	r3, sp, #12
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	462a      	mov	r2, r5
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <_svfiprintf_r+0x1f4>)
 80046a2:	a904      	add	r1, sp, #16
 80046a4:	4638      	mov	r0, r7
 80046a6:	f000 f879 	bl	800479c <_printf_i>
 80046aa:	e7eb      	b.n	8004684 <_svfiprintf_r+0x1c0>
 80046ac:	08004c18 	.word	0x08004c18
 80046b0:	08004c22 	.word	0x08004c22
 80046b4:	00000000 	.word	0x00000000
 80046b8:	08004411 	.word	0x08004411
 80046bc:	08004c1e 	.word	0x08004c1e

080046c0 <_printf_common>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	4699      	mov	r9, r3
 80046c8:	688a      	ldr	r2, [r1, #8]
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bfb8      	it	lt
 80046d4:	4613      	movlt	r3, r2
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046dc:	4607      	mov	r7, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	b10a      	cbz	r2, 80046e6 <_printf_common+0x26>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	6833      	ldrmi	r3, [r6, #0]
 80046ee:	3302      	addmi	r3, #2
 80046f0:	6033      	strmi	r3, [r6, #0]
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	f015 0506 	ands.w	r5, r5, #6
 80046f8:	d106      	bne.n	8004708 <_printf_common+0x48>
 80046fa:	f104 0a19 	add.w	sl, r4, #25
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	6832      	ldr	r2, [r6, #0]
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	42ab      	cmp	r3, r5
 8004706:	dc26      	bgt.n	8004756 <_printf_common+0x96>
 8004708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800470c:	1e13      	subs	r3, r2, #0
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	bf18      	it	ne
 8004712:	2301      	movne	r3, #1
 8004714:	0692      	lsls	r2, r2, #26
 8004716:	d42b      	bmi.n	8004770 <_printf_common+0xb0>
 8004718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800471c:	4649      	mov	r1, r9
 800471e:	4638      	mov	r0, r7
 8004720:	47c0      	blx	r8
 8004722:	3001      	adds	r0, #1
 8004724:	d01e      	beq.n	8004764 <_printf_common+0xa4>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf02      	ittt	eq
 8004732:	68e5      	ldreq	r5, [r4, #12]
 8004734:	6833      	ldreq	r3, [r6, #0]
 8004736:	1aed      	subeq	r5, r5, r3
 8004738:	68a3      	ldr	r3, [r4, #8]
 800473a:	bf0c      	ite	eq
 800473c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004740:	2500      	movne	r5, #0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfc4      	itt	gt
 8004746:	1a9b      	subgt	r3, r3, r2
 8004748:	18ed      	addgt	r5, r5, r3
 800474a:	2600      	movs	r6, #0
 800474c:	341a      	adds	r4, #26
 800474e:	42b5      	cmp	r5, r6
 8004750:	d11a      	bne.n	8004788 <_printf_common+0xc8>
 8004752:	2000      	movs	r0, #0
 8004754:	e008      	b.n	8004768 <_printf_common+0xa8>
 8004756:	2301      	movs	r3, #1
 8004758:	4652      	mov	r2, sl
 800475a:	4649      	mov	r1, r9
 800475c:	4638      	mov	r0, r7
 800475e:	47c0      	blx	r8
 8004760:	3001      	adds	r0, #1
 8004762:	d103      	bne.n	800476c <_printf_common+0xac>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	3501      	adds	r5, #1
 800476e:	e7c6      	b.n	80046fe <_printf_common+0x3e>
 8004770:	18e1      	adds	r1, r4, r3
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	2030      	movs	r0, #48	; 0x30
 8004776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800477a:	4422      	add	r2, r4
 800477c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004784:	3302      	adds	r3, #2
 8004786:	e7c7      	b.n	8004718 <_printf_common+0x58>
 8004788:	2301      	movs	r3, #1
 800478a:	4622      	mov	r2, r4
 800478c:	4649      	mov	r1, r9
 800478e:	4638      	mov	r0, r7
 8004790:	47c0      	blx	r8
 8004792:	3001      	adds	r0, #1
 8004794:	d0e6      	beq.n	8004764 <_printf_common+0xa4>
 8004796:	3601      	adds	r6, #1
 8004798:	e7d9      	b.n	800474e <_printf_common+0x8e>
	...

0800479c <_printf_i>:
 800479c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	7e0f      	ldrb	r7, [r1, #24]
 80047a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047a4:	2f78      	cmp	r7, #120	; 0x78
 80047a6:	4691      	mov	r9, r2
 80047a8:	4680      	mov	r8, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	469a      	mov	sl, r3
 80047ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047b2:	d807      	bhi.n	80047c4 <_printf_i+0x28>
 80047b4:	2f62      	cmp	r7, #98	; 0x62
 80047b6:	d80a      	bhi.n	80047ce <_printf_i+0x32>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	f000 80d4 	beq.w	8004966 <_printf_i+0x1ca>
 80047be:	2f58      	cmp	r7, #88	; 0x58
 80047c0:	f000 80c0 	beq.w	8004944 <_printf_i+0x1a8>
 80047c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047cc:	e03a      	b.n	8004844 <_printf_i+0xa8>
 80047ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047d2:	2b15      	cmp	r3, #21
 80047d4:	d8f6      	bhi.n	80047c4 <_printf_i+0x28>
 80047d6:	a101      	add	r1, pc, #4	; (adr r1, 80047dc <_printf_i+0x40>)
 80047d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047dc:	08004835 	.word	0x08004835
 80047e0:	08004849 	.word	0x08004849
 80047e4:	080047c5 	.word	0x080047c5
 80047e8:	080047c5 	.word	0x080047c5
 80047ec:	080047c5 	.word	0x080047c5
 80047f0:	080047c5 	.word	0x080047c5
 80047f4:	08004849 	.word	0x08004849
 80047f8:	080047c5 	.word	0x080047c5
 80047fc:	080047c5 	.word	0x080047c5
 8004800:	080047c5 	.word	0x080047c5
 8004804:	080047c5 	.word	0x080047c5
 8004808:	0800494d 	.word	0x0800494d
 800480c:	08004875 	.word	0x08004875
 8004810:	08004907 	.word	0x08004907
 8004814:	080047c5 	.word	0x080047c5
 8004818:	080047c5 	.word	0x080047c5
 800481c:	0800496f 	.word	0x0800496f
 8004820:	080047c5 	.word	0x080047c5
 8004824:	08004875 	.word	0x08004875
 8004828:	080047c5 	.word	0x080047c5
 800482c:	080047c5 	.word	0x080047c5
 8004830:	0800490f 	.word	0x0800490f
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	602a      	str	r2, [r5, #0]
 800483c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004844:	2301      	movs	r3, #1
 8004846:	e09f      	b.n	8004988 <_printf_i+0x1ec>
 8004848:	6820      	ldr	r0, [r4, #0]
 800484a:	682b      	ldr	r3, [r5, #0]
 800484c:	0607      	lsls	r7, r0, #24
 800484e:	f103 0104 	add.w	r1, r3, #4
 8004852:	6029      	str	r1, [r5, #0]
 8004854:	d501      	bpl.n	800485a <_printf_i+0xbe>
 8004856:	681e      	ldr	r6, [r3, #0]
 8004858:	e003      	b.n	8004862 <_printf_i+0xc6>
 800485a:	0646      	lsls	r6, r0, #25
 800485c:	d5fb      	bpl.n	8004856 <_printf_i+0xba>
 800485e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004862:	2e00      	cmp	r6, #0
 8004864:	da03      	bge.n	800486e <_printf_i+0xd2>
 8004866:	232d      	movs	r3, #45	; 0x2d
 8004868:	4276      	negs	r6, r6
 800486a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800486e:	485a      	ldr	r0, [pc, #360]	; (80049d8 <_printf_i+0x23c>)
 8004870:	230a      	movs	r3, #10
 8004872:	e012      	b.n	800489a <_printf_i+0xfe>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	6820      	ldr	r0, [r4, #0]
 8004878:	1d19      	adds	r1, r3, #4
 800487a:	6029      	str	r1, [r5, #0]
 800487c:	0605      	lsls	r5, r0, #24
 800487e:	d501      	bpl.n	8004884 <_printf_i+0xe8>
 8004880:	681e      	ldr	r6, [r3, #0]
 8004882:	e002      	b.n	800488a <_printf_i+0xee>
 8004884:	0641      	lsls	r1, r0, #25
 8004886:	d5fb      	bpl.n	8004880 <_printf_i+0xe4>
 8004888:	881e      	ldrh	r6, [r3, #0]
 800488a:	4853      	ldr	r0, [pc, #332]	; (80049d8 <_printf_i+0x23c>)
 800488c:	2f6f      	cmp	r7, #111	; 0x6f
 800488e:	bf0c      	ite	eq
 8004890:	2308      	moveq	r3, #8
 8004892:	230a      	movne	r3, #10
 8004894:	2100      	movs	r1, #0
 8004896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800489a:	6865      	ldr	r5, [r4, #4]
 800489c:	60a5      	str	r5, [r4, #8]
 800489e:	2d00      	cmp	r5, #0
 80048a0:	bfa2      	ittt	ge
 80048a2:	6821      	ldrge	r1, [r4, #0]
 80048a4:	f021 0104 	bicge.w	r1, r1, #4
 80048a8:	6021      	strge	r1, [r4, #0]
 80048aa:	b90e      	cbnz	r6, 80048b0 <_printf_i+0x114>
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	d04b      	beq.n	8004948 <_printf_i+0x1ac>
 80048b0:	4615      	mov	r5, r2
 80048b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048b6:	fb03 6711 	mls	r7, r3, r1, r6
 80048ba:	5dc7      	ldrb	r7, [r0, r7]
 80048bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048c0:	4637      	mov	r7, r6
 80048c2:	42bb      	cmp	r3, r7
 80048c4:	460e      	mov	r6, r1
 80048c6:	d9f4      	bls.n	80048b2 <_printf_i+0x116>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d10b      	bne.n	80048e4 <_printf_i+0x148>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	07de      	lsls	r6, r3, #31
 80048d0:	d508      	bpl.n	80048e4 <_printf_i+0x148>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	6861      	ldr	r1, [r4, #4]
 80048d6:	4299      	cmp	r1, r3
 80048d8:	bfde      	ittt	le
 80048da:	2330      	movle	r3, #48	; 0x30
 80048dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048e4:	1b52      	subs	r2, r2, r5
 80048e6:	6122      	str	r2, [r4, #16]
 80048e8:	f8cd a000 	str.w	sl, [sp]
 80048ec:	464b      	mov	r3, r9
 80048ee:	aa03      	add	r2, sp, #12
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fee4 	bl	80046c0 <_printf_common>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d14a      	bne.n	8004992 <_printf_i+0x1f6>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	b004      	add	sp, #16
 8004902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	4833      	ldr	r0, [pc, #204]	; (80049dc <_printf_i+0x240>)
 8004910:	2778      	movs	r7, #120	; 0x78
 8004912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	6829      	ldr	r1, [r5, #0]
 800491a:	061f      	lsls	r7, r3, #24
 800491c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004920:	d402      	bmi.n	8004928 <_printf_i+0x18c>
 8004922:	065f      	lsls	r7, r3, #25
 8004924:	bf48      	it	mi
 8004926:	b2b6      	uxthmi	r6, r6
 8004928:	07df      	lsls	r7, r3, #31
 800492a:	bf48      	it	mi
 800492c:	f043 0320 	orrmi.w	r3, r3, #32
 8004930:	6029      	str	r1, [r5, #0]
 8004932:	bf48      	it	mi
 8004934:	6023      	strmi	r3, [r4, #0]
 8004936:	b91e      	cbnz	r6, 8004940 <_printf_i+0x1a4>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f023 0320 	bic.w	r3, r3, #32
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	2310      	movs	r3, #16
 8004942:	e7a7      	b.n	8004894 <_printf_i+0xf8>
 8004944:	4824      	ldr	r0, [pc, #144]	; (80049d8 <_printf_i+0x23c>)
 8004946:	e7e4      	b.n	8004912 <_printf_i+0x176>
 8004948:	4615      	mov	r5, r2
 800494a:	e7bd      	b.n	80048c8 <_printf_i+0x12c>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	6826      	ldr	r6, [r4, #0]
 8004950:	6961      	ldr	r1, [r4, #20]
 8004952:	1d18      	adds	r0, r3, #4
 8004954:	6028      	str	r0, [r5, #0]
 8004956:	0635      	lsls	r5, r6, #24
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	d501      	bpl.n	8004960 <_printf_i+0x1c4>
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	e002      	b.n	8004966 <_printf_i+0x1ca>
 8004960:	0670      	lsls	r0, r6, #25
 8004962:	d5fb      	bpl.n	800495c <_printf_i+0x1c0>
 8004964:	8019      	strh	r1, [r3, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	4615      	mov	r5, r2
 800496c:	e7bc      	b.n	80048e8 <_printf_i+0x14c>
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	602a      	str	r2, [r5, #0]
 8004974:	681d      	ldr	r5, [r3, #0]
 8004976:	6862      	ldr	r2, [r4, #4]
 8004978:	2100      	movs	r1, #0
 800497a:	4628      	mov	r0, r5
 800497c:	f7fb fc30 	bl	80001e0 <memchr>
 8004980:	b108      	cbz	r0, 8004986 <_printf_i+0x1ea>
 8004982:	1b40      	subs	r0, r0, r5
 8004984:	6060      	str	r0, [r4, #4]
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	2300      	movs	r3, #0
 800498c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004990:	e7aa      	b.n	80048e8 <_printf_i+0x14c>
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	462a      	mov	r2, r5
 8004996:	4649      	mov	r1, r9
 8004998:	4640      	mov	r0, r8
 800499a:	47d0      	blx	sl
 800499c:	3001      	adds	r0, #1
 800499e:	d0ad      	beq.n	80048fc <_printf_i+0x160>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	079b      	lsls	r3, r3, #30
 80049a4:	d413      	bmi.n	80049ce <_printf_i+0x232>
 80049a6:	68e0      	ldr	r0, [r4, #12]
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	4298      	cmp	r0, r3
 80049ac:	bfb8      	it	lt
 80049ae:	4618      	movlt	r0, r3
 80049b0:	e7a6      	b.n	8004900 <_printf_i+0x164>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4632      	mov	r2, r6
 80049b6:	4649      	mov	r1, r9
 80049b8:	4640      	mov	r0, r8
 80049ba:	47d0      	blx	sl
 80049bc:	3001      	adds	r0, #1
 80049be:	d09d      	beq.n	80048fc <_printf_i+0x160>
 80049c0:	3501      	adds	r5, #1
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	9903      	ldr	r1, [sp, #12]
 80049c6:	1a5b      	subs	r3, r3, r1
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dcf2      	bgt.n	80049b2 <_printf_i+0x216>
 80049cc:	e7eb      	b.n	80049a6 <_printf_i+0x20a>
 80049ce:	2500      	movs	r5, #0
 80049d0:	f104 0619 	add.w	r6, r4, #25
 80049d4:	e7f5      	b.n	80049c2 <_printf_i+0x226>
 80049d6:	bf00      	nop
 80049d8:	08004c29 	.word	0x08004c29
 80049dc:	08004c3a 	.word	0x08004c3a

080049e0 <memmove>:
 80049e0:	4288      	cmp	r0, r1
 80049e2:	b510      	push	{r4, lr}
 80049e4:	eb01 0402 	add.w	r4, r1, r2
 80049e8:	d902      	bls.n	80049f0 <memmove+0x10>
 80049ea:	4284      	cmp	r4, r0
 80049ec:	4623      	mov	r3, r4
 80049ee:	d807      	bhi.n	8004a00 <memmove+0x20>
 80049f0:	1e43      	subs	r3, r0, #1
 80049f2:	42a1      	cmp	r1, r4
 80049f4:	d008      	beq.n	8004a08 <memmove+0x28>
 80049f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049fe:	e7f8      	b.n	80049f2 <memmove+0x12>
 8004a00:	4402      	add	r2, r0
 8004a02:	4601      	mov	r1, r0
 8004a04:	428a      	cmp	r2, r1
 8004a06:	d100      	bne.n	8004a0a <memmove+0x2a>
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a12:	e7f7      	b.n	8004a04 <memmove+0x24>

08004a14 <_sbrk_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	; (8004a30 <_sbrk_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fc faa0 	bl	8000f64 <_sbrk>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_sbrk_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_sbrk_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	200005d4 	.word	0x200005d4

08004a34 <_realloc_r>:
 8004a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a38:	4680      	mov	r8, r0
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	460e      	mov	r6, r1
 8004a3e:	b921      	cbnz	r1, 8004a4a <_realloc_r+0x16>
 8004a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a44:	4611      	mov	r1, r2
 8004a46:	f7ff bc57 	b.w	80042f8 <_malloc_r>
 8004a4a:	b92a      	cbnz	r2, 8004a58 <_realloc_r+0x24>
 8004a4c:	f7ff fbe8 	bl	8004220 <_free_r>
 8004a50:	4625      	mov	r5, r4
 8004a52:	4628      	mov	r0, r5
 8004a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a58:	f000 f81b 	bl	8004a92 <_malloc_usable_size_r>
 8004a5c:	4284      	cmp	r4, r0
 8004a5e:	4607      	mov	r7, r0
 8004a60:	d802      	bhi.n	8004a68 <_realloc_r+0x34>
 8004a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a66:	d812      	bhi.n	8004a8e <_realloc_r+0x5a>
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	f7ff fc44 	bl	80042f8 <_malloc_r>
 8004a70:	4605      	mov	r5, r0
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d0ed      	beq.n	8004a52 <_realloc_r+0x1e>
 8004a76:	42bc      	cmp	r4, r7
 8004a78:	4622      	mov	r2, r4
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	bf28      	it	cs
 8004a7e:	463a      	movcs	r2, r7
 8004a80:	f7ff fbc0 	bl	8004204 <memcpy>
 8004a84:	4631      	mov	r1, r6
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff fbca 	bl	8004220 <_free_r>
 8004a8c:	e7e1      	b.n	8004a52 <_realloc_r+0x1e>
 8004a8e:	4635      	mov	r5, r6
 8004a90:	e7df      	b.n	8004a52 <_realloc_r+0x1e>

08004a92 <_malloc_usable_size_r>:
 8004a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a96:	1f18      	subs	r0, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bfbc      	itt	lt
 8004a9c:	580b      	ldrlt	r3, [r1, r0]
 8004a9e:	18c0      	addlt	r0, r0, r3
 8004aa0:	4770      	bx	lr
	...

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
